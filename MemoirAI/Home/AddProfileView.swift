import SwiftUIimport PhotosUIimport RevenueCatimport RevenueCatUIstruct AddProfileView: View {    @Environment(\.dismiss) private var dismiss    @EnvironmentObject private var profileVM: ProfileViewModel    @StateObject private var subscriptionManager = RCSubscriptionManager.shared    // Style constants    private let headerFontSize: CGFloat = 28    private let subHeaderFontSize: CGFloat = 21  // 3/4 of header    private let bodyFontSize: CGFloat = 18    private let baseBackground = Color(red: 0.98, green: 0.94, blue: 0.86)    private var inputBackground: Color { baseBackground.opacity(0.7) }    @State private var name: String = ""    @FocusState private var isNameFieldFocused: Bool    @State private var photoSelection: PhotosPickerItem? = nil    @State private var selectedPhotoData: Data? = nil    @State private var showPaywall = false    var body: some View {        ZStack {            baseBackground                .ignoresSafeArea()            if profileVM.canCreateNewProfile {                // ✅ Can create profile - show normal UI                profileCreationView            } else {                // ❌ Cannot create profile - show subscription required                subscriptionRequiredView            }        }        .ignoresSafeArea(.keyboard, edges: .bottom)        .onChange(of: photoSelection) { oldValue, newValue in            guard let item = newValue else { return }            loadPhotoData(from: item)        }        .fullScreenCover(isPresented: $showPaywall) {            // Add error handling around PaywallView            Group {                if RCSubscriptionManager.shared.offerings?.current?.availablePackages.isEmpty == false {                    PaywallView(displayCloseButton: true)                } else {                    // Fallback view when paywall can't load                    VStack(spacing: 20) {                        Image(systemName: "exclamationmark.triangle")                            .font(.system(size: 60))                            .foregroundColor(.orange)                                                Text("Subscription Temporarily Unavailable")                            .font(.title2)                            .fontWeight(.semibold)                                                Text("Please try again later or contact support.")                            .multilineTextAlignment(.center)                                                Button("Close") {                            showPaywall = false                        }                        .padding()                        .background(Color.blue)                        .foregroundColor(.white)                        .cornerRadius(12)                    }                    .padding()                    .background(Color.white)                }            }            .frame(maxWidth: .infinity)            .ignoresSafeArea()        }    }    // ✨ NEW: Subscription required view    private var subscriptionRequiredView: some View {        VStack(spacing: 32) {            Spacer()                        // Icon            Image(systemName: "person.2.badge.plus")                .font(.system(size: 80))                .foregroundColor(.orange.opacity(0.7))                        // Title            VStack(spacing: 12) {                Text("Multiple Profiles")                    .font(.customSerifFallback(size: headerFontSize))                    .foregroundColor(Color(red: 0.10, green: 0.22, blue: 0.14))                    .fontWeight(.light)                                Text("Create profiles for multiple family members and keep their stories separate")                    .font(.system(size: bodyFontSize))                    .fontWeight(.light)                    .foregroundColor(.black.opacity(0.6))                    .multilineTextAlignment(.center)                    .padding(.horizontal)            }                        // Current status            VStack(spacing: 8) {                Text("Current: \(profileVM.profiles.count)/1 profile")                    .font(.system(size: 16, weight: .medium))                    .foregroundColor(.gray)                                Text("Subscribe to create unlimited profiles")                    .font(.system(size: 14))                    .foregroundColor(.gray)            }            .padding()            .background(Color.black.opacity(0.05))            .cornerRadius(12)            .padding(.horizontal)                        Spacer()                        // CTA Buttons            VStack(spacing: 16) {                Button(action: { showPaywall = true }) {                    Text("Subscribe Now")                        .font(.system(size: bodyFontSize, weight: .semibold))                        .foregroundColor(.white)                        .frame(maxWidth: .infinity)                        .padding(.vertical, 14)                        .background(Color(red: 0.83, green: 0.45, blue: 0.14))                        .cornerRadius(24)                }                .padding(.horizontal)                                Button("Maybe Later") {                    dismiss()                }                .font(.system(size: bodyFontSize))                .fontWeight(.light)                .foregroundColor(.gray)            }            .padding(.bottom, 20)        }    }        // ✅ Normal profile creation view    private var profileCreationView: some View {        VStack(spacing: 24) {            // Title            VStack(spacing: 6) {                Text("Add a New Profile")                    .font(.customSerifFallback(size: headerFontSize))                    .foregroundColor(Color(red: 0.10, green: 0.22, blue: 0.14))                    .fontWeight(.light)                Text("Who is this memory profile for?")                    .font(.system(size: bodyFontSize))                    .fontWeight(.light)                    .foregroundColor(.black.opacity(0.6))            }            .padding(.top, 40)            // Name Input with pencil icon            HStack {                TextField("Enter their name...", text: $name)                    .font(.system(size: bodyFontSize))                    .fontWeight(.light)                    .foregroundColor(.black.opacity(0.6))                    .padding()                    .background(inputBackground)                    .cornerRadius(16)                    .shadow(color: Color.black.opacity(0.05), radius: 4, x: 0, y: 2)                    .focused($isNameFieldFocused)                if !isNameFieldFocused {                    Image(systemName: "pencil")                        .foregroundColor(.gray.opacity(0.6))                        .padding(.trailing, 16)                        .onTapGesture {                            isNameFieldFocused = true                        }                }            }            .padding(.horizontal)            // Profile Picture Picker            VStack(spacing: 8) {                Text("Add a Profile Picture")                    .font(.customSerifFallback(size: subHeaderFontSize))                    .fontWeight(.light)                    .foregroundColor(Color(red: 0.10, green: 0.22, blue: 0.14))                ZStack(alignment: .bottomTrailing) {                    Group {                        if let data = selectedPhotoData,                           let uiImage = UIImage(data: data) {                            Image(uiImage: uiImage)                                .resizable()                                .scaledToFill()                        } else {                            RoundedRectangle(cornerRadius: 20)                                .strokeBorder(                                    style: StrokeStyle(lineWidth: 2, dash: [8, 8])                                )                                .foregroundColor(.gray.opacity(0.4))                                .background(                                    RoundedRectangle(cornerRadius: 20)                                        .fill(inputBackground)                                )                                .overlay(                                    Image(systemName: "photo")                                        .resizable()                                        .scaledToFit()                                        .frame(width: 100, height: 100)                                        .foregroundColor(.gray.opacity(0.6))                                )                        }                    }                    .frame(width: 200, height: 200)                    .clipShape(RoundedRectangle(cornerRadius: 20))                    .shadow(color: Color.black.opacity(0.05), radius: 4, x: 0, y: 2)                    PhotosPicker(                        selection: $photoSelection,                        matching: .images                    ) {                        Image(systemName: "camera.fill")                            .font(.system(size: 16))                            .padding(10)                            .background(Color.white)                            .clipShape(Circle())                            .shadow(radius: 2)                    }                    .offset(x: -12, y: -12)                }                if selectedPhotoData == nil {                    Text("Tap to upload")                        .font(.caption)                        .fontWeight(.light)                        .foregroundColor(.black.opacity(0.5))                }            }            Spacer()            // Save Button (always enabled)            Button(action: saveProfile) {                Text("Save Profile")                    .font(.system(size: bodyFontSize, weight: .semibold))                    .foregroundColor(.white)                    .frame(maxWidth: .infinity)                    .padding(.vertical, 14)                    .background(Color(red: 0.83, green: 0.45, blue: 0.14))                    .cornerRadius(24)                    .padding(.horizontal)            }            // Cancel Button            Button("Cancel") {                dismiss()            }            .font(.system(size: bodyFontSize))            .fontWeight(.light)            .foregroundColor(.gray)            .padding(.bottom, 20)        }    }    private func loadPhotoData(from item: PhotosPickerItem) {        Task {            do {                if let data = try await item.loadTransferable(type: Data.self) {                    selectedPhotoData = data                }            } catch {                print("Failed to load photo: \(error)")            }        }    }    private func saveProfile() {        let profile = Profile(name: name, photoData: selectedPhotoData)                if profileVM.addProfile(profile) {            dismiss()        } else {            // This shouldn't happen due to UI gating, but handle gracefully            showPaywall = true        }    }}struct AddProfileView_Previews: PreviewProvider {    static var previews: some View {        AddProfileView()            .environmentObject(ProfileViewModel())    }}