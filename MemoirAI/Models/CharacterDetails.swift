//////////  CharacterDetails.swift////  MemoirAI////////  Created by user941803 on 6/15/25.////////import Foundationimport SwiftUI////struct CharacterDetails: Codable {//    var characters: [Character] = []////    struct Character: Codable, Identifiable {//        let id = UUID()//        var name: String = ""//        var age: String = ""//        var race: String = ""//        var physicalDescription: String = ""//        var clothing: String = ""//        var relationshipToNarrator: String = ""//    }//}////class MemoryCompletionChecker {//    static let shared = MemoryCompletionChecker()////    private init() {}////    /// Determines if a memory needs character details for better image generation//    func isMemoryIncomplete(_ memory: MemoryEntry) -> Bool {//        // Only check memories that have substantial text content//        guard let text = memory.text, !text.isEmpty, text.count > 50 else {//            return false//        }////        // Check if we already have character details//        if let detailsString = memory.characterDetails,//           !detailsString.isEmpty,//           let details = parseCharacterDetails(detailsString),//           !details.characters.isEmpty {//            return false//        }////        // Use simple heuristics to detect if the memory likely contains characters//        return containsCharacterReferences(text)//    }////    /// Parse character details from JSON string//    func parseCharacterDetails(_ jsonString: String) -> CharacterDetails? {//        guard let data = jsonString.data(using: .utf8) else { return nil }//        return try? JSONDecoder().decode(CharacterDetails.self, from: data)//    }////    /// Encode character details to JSON string//    func encodeCharacterDetails(_ details: CharacterDetails) -> String? {//        guard let data = try? JSONEncoder().encode(details) else { return nil }//        return String(data: data, encoding: .utf8)//    }////    /// Simple heuristic to detect character references in text//    private func containsCharacterReferences(_ text: String) -> Bool {//        let lowercaseText = text.lowercased()////        let characterKeywords = [//            // Pronouns//            " he ", " she ", " him ", " her ", " his ", " hers ",//            // Relationships//            "mother", "father", "mom", "dad", "brother", "sister",//            "friend", "cousin", "aunt", "uncle", "grandma", "grandpa",//            "wife", "husband", "daughter", "son", "child", "kid",//            // Groups//            "people", "family", "friends", "neighbors", "classmates",//            // Actions that involve others//            "talked to", "met", "played with", "went with", "saw"//        ]////        return characterKeywords.contains { lowercaseText.contains($0) }//    }////    /// Get suggested questions based on memory content//    func getRelevantQuestions(for memory: MemoryEntry) -> [String] {//        guard let text = memory.text else { return defaultQuestions }////        var questions: [String] = []//        let lowercaseText = text.lowercased()////        // Always ask basic questions//        questions.append("Who were the main people in this memory?")////        // Conditional questions based on content//        if lowercaseText.contains("child") || lowercaseText.contains("kid") || lowercaseText.contains("young") {//            questions.append("How old were you and others at the time?")//        }////        if lowercaseText.contains("family") || lowercaseText.contains("relative") {//            questions.append("What was your relationship to each person?")//        }////        questions.append("Can you describe what each person looked like?")//        questions.append("What were people wearing or how were they dressed?")////        return questions//    }////    private let defaultQuestions = [//        "Who were the main people in this memory?",//        "How old were you and others at the time?",//        "What was your relationship to each person?",//        "Can you describe what each person looked like?",//        "What were people wearing or how were they dressed?"//    ]//}////extension MemoryEntry {//    var isIncomplete: Bool {//        return MemoryCompletionChecker.shared.isMemoryIncomplete(self)//    }////    var parsedCharacterDetails: CharacterDetails? {//        guard let detailsString = characterDetails else { return nil }//        return MemoryCompletionChecker.shared.parseCharacterDetails(detailsString)//    }////    func updateCharacterDetails(_ details: CharacterDetails) {//        characterDetails = MemoryCompletionChecker.shared.encodeCharacterDetails(details)//    }//}extension MemoryEntry {    /// Returns a URL that can be used to play back this memory's audio, reconstructing a temp file from `audioData` if needed.    var playbackURL: URL? {        if let urlString = audioFileURL,           let url = URL(string: urlString),           FileManager.default.fileExists(atPath: url.path) {            return url        }        if let data = value(forKey: "audioData") as? Data {            let tmp = FileManager.default.temporaryDirectory                .appendingPathComponent((id?.uuidString ?? UUID().uuidString) + ".caf")            if !FileManager.default.fileExists(atPath: tmp.path) {                try? data.write(to: tmp, options: .atomic)            }            return tmp        }        return nil    }    /// Convenience boolean used by UI to show an audio icon.    var hasAudio: Bool { playbackURL != nil }}