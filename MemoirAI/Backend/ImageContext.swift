import Foundationimport UIKit/// Associates generated text prompts with the user’s own photos (or style-tile)./// If at least one UIImage is supplied, the first photo is used to “enrich”/// every prompt via OpenAI, otherwise prompts pass through unchanged.actor ImageContext {    private let openAI: OpenAIImageService    init(apiKey: String, session: URLSession = .shared) {        print("[ImageContext DEBUG] Initializing ImageContext…")        self.openAI = OpenAIImageService(apiKey: apiKey, session: session)        print("[ImageContext DEBUG] ImageContext ready ✓")    }    /// Tweaks each prompt so its wording harmonizes with the reference photo.    ///    /// - Parameters:    ///   - prompts: Raw `ImagePrompt` array straight from `PromptGenerator` (now carries referenceImageIDs).    ///   - photos:  Up to four UIImages (but only the **first** one is used).    /// - Returns:  One-for-one array of `ImagePrompt`s (tweaked or original, preserving IDs).    func enrichPrompts(        prompts: [ImagePrompt],        withPhotos photos: [UIImage]    ) async throws -> [ImagePrompt] {        print("[ImageContext DEBUG] enrichPrompts called with \(prompts.count) prompts, \(photos.count) photos")        let styleTile = photos.first        if let tile = styleTile {            print("[ImageContext DEBUG] Using first reference photo (size \(tile.size)) for all prompts.")        } else {            print("[ImageContext DEBUG] No reference photo supplied – prompts will pass through unchanged.")        }        var enriched: [ImagePrompt] = []        print("[ImageContext DEBUG] ▶︎ Starting enrichment loop")        for (idx, prompt) in prompts.enumerated() {            print("[ImageContext DEBUG] • Prompt \(idx + 1)/\(prompts.count): \"\(prompt.text.prefix(80))…\"")            // idempotent enrichment: skip if already contains style footer            if prompt.text.contains("Match the colour palette") {                print("[ImageContext DEBUG]   ↪︎ Prompt already enriched; skipping.")                enriched.append(prompt)                continue            }            // fast-path when there’s no style-tile            guard let tile = styleTile else {                enriched.append(prompt)                continue            }            // try to enrich with the style-tile            do {                let tweakedText = try await openAI.enrichPrompt(                    prompt.text,                    with: tile                )                // preserve the same reference IDs                let enrichedPrompt = ImagePrompt(                    text: tweakedText,                    referenceImageIDs: prompt.referenceImageIDs                )                enriched.append(enrichedPrompt)                print("[ImageContext DEBUG]   ↪︎ Enriched OK (chars: \(tweakedText.count))")            } catch {                print("[ImageContext ERROR]   ✕ Enrichment failed – using original. Error: \(error.localizedDescription)")                enriched.append(prompt)            }        }        print("[ImageContext DEBUG] enrichPrompts finished – returning \(enriched.count) prompts")        return enriched    }}