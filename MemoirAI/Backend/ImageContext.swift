import Foundationimport UIKitactor ImageContext {    private let openAI: OpenAIImageService    // MODIFICATION 1: Added 'gender' to the function signature    func faceDescriptor(fileID: String, jpegData: Data? = nil, race: String? = nil, gender: String? = nil) async throws -> String {        // ‚ñ∫ If we already have the JPEG bytes, use a data: URI; otherwise fall        //   back to the internal file-id scheme. Passing the JPEG avoids all        //   download / permission issues.        let imageURL: String        if let bytes = jpegData {            imageURL = "data:image/jpeg;base64,\(bytes.base64EncodedString())"        } else {            imageURL = "openai://file/\(fileID)"       // requires OpenAI fetch        }        // --- DYNAMIC PROMPT LOGIC (MODIFIED) ---        // Build a context string from user-provided details        var contextClauses: [String] = []        if let userRace = race, !userRace.trimmingCharacters(in: .whitespaces).isEmpty {            contextClauses.append("is identified as \(userRace)")        }        if let userGender = gender, !userGender.trimmingCharacters(in: .whitespaces).isEmpty {            contextClauses.append("presents as \(userGender)")        }        let contextString = contextClauses.isEmpty ? "" : "The main subject \(contextClauses.joined(separator: " and "))."        let promptText: String        if !contextClauses.isEmpty {            // Context was provided. Instruct the AI to use it.            promptText = """            For a fictional story, describe this person's physical appearance in ONE short, comma-separated sentence.            \(contextString)                        Based on the image and this context, detail their gender presentation, prominent facial features, skin tone, and hair.            Do not use the word "individual". Use a gendered term like "man" or "woman" as appropriate.            Absolutely NO words or hints about age (e.g. young, old, adult, child).            """        } else {            // No context was provided. Fall back to guessing.            promptText = """            For a fictional story, describe this person's physical appearance in ONE short, comma-separated sentence.            1.  First, identify their apparent gender (e.g. "a man", "a woman"). Do not use the word "individual".            2.  Then, detail their prominent facial features, skin tone, hair color, and hair texture.            3.  Based *only* on those visual traits, suggest what geographic regions their ancestry might be associated with.            Use descriptive and suggestive language for ancestry, but be definitive about the gender presentation.            Absolutely NO percentages and NO words or hints about age (e.g. young, old, adult, child).            """        }        // --- END OF DYNAMIC PROMPT LOGIC ---        var req = URLRequest(url: URL(string: "https://api.openai.com/v1/chat/completions")!)        req.httpMethod = "POST"        req.addValue("Bearer \(openAI.apiKey)",  forHTTPHeaderField: "Authorization")        req.addValue("application/json",         forHTTPHeaderField: "Content-Type")        let bodyDict: [String: Any] = [            "model": "gpt-4o-mini",            "messages": [[                "role": "user",                "content": [                    [                        "type": "text",                        "text": promptText // Use the dynamically generated prompt                    ],                    [                        "type": "image_url",                        "image_url": ["url": imageURL]                    ]                ]            ]],            "max_tokens": 100, // Increased to allow for a more descriptive response            "temperature": 0.2        ]        let bodyData = try JSONSerialization.data(withJSONObject: bodyDict)        req.httpBody = bodyData        print("üì§ Vision body (first 300 chars):",              String(data: bodyData.prefix(300), encoding: .utf8) ?? "<binary>")        let (data, rsp) = try await openAI.session.data(for: req)        if let http = rsp as? HTTPURLResponse {            print("üì• Vision HTTP \(http.statusCode) headers:", http.allHeaderFields)        }        print("üñºÔ∏è Vision JSON raw:\n", String(data: data, encoding: .utf8) ?? "<binary>")        guard            let root    = try? JSONSerialization.jsonObject(with: data) as? [String: Any],            let choices = root["choices"] as? [[String: Any]],            let msg     = choices.first?["message"] as? [String: Any],            let text    = msg["content"] as? String,            !text.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty        else {            // Check for safety filter responses in the JSON            if let responseString = String(data: data, encoding: .utf8), responseString.contains("I'm unable to provide that information") {                 throw NSError(domain: "MemoirAI",                               code: -43,                               userInfo: [NSLocalizedDescriptionKey: "AI refused due to safety policy. Try a different prompt or image."])            }                        throw NSError(domain: "MemoirAI",                          code: -42,                          userInfo: [NSLocalizedDescriptionKey: "Vision descriptor empty / bad JSON"])        }        let final = removingAgeMarkers(from: text)        print("‚úÖ Final descriptor:", final)        return final    }    func createReference(from image: UIImage) async throws -> (id: String, jpeg: Data) {        guard let jpg = image.jpegData(compressionQuality: 0.9) else {            throw NSError(domain: "MemoirAI",                          code: -1,                          userInfo: [NSLocalizedDescriptionKey: "JPEG-encode failed"])        }        var req = URLRequest(url: URL(string: "https://api.openai.com/v1/files")!)        req.httpMethod = "POST"        req.addValue("Bearer \(openAI.apiKey)", forHTTPHeaderField: "Authorization")        let boundary = UUID().uuidString        req.addValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")        var body = Data()        // purpose        body.append("--\(boundary)\r\n".data(using: .utf8)!)        body.append("Content-Disposition: form-data; name=\"purpose\"\r\n\r\nvision\r\n".data(using: .utf8)!)        // file        body.append("--\(boundary)\r\n".data(using: .utf8)!)        body.append("Content-Disposition: form-data; name=\"file\"; filename=\"headshot.jpg\"\r\n".data(using: .utf8)!)        body.append("Content-Type: image/jpeg\r\n\r\n".data(using: .utf8)!)        body.append(jpg)        body.append("\r\n--\(boundary)--\r\n".data(using: .utf8)!)        req.httpBody = body        print("üì§ Uploading head-shot (\(jpg.count) bytes)‚Ä¶")        let (data, rsp) = try await openAI.session.data(for: req)        if let http = rsp as? HTTPURLResponse {            print("üì• Upload HTTP \(http.statusCode) headers:", http.allHeaderFields)        }        print("üîÑ Upload response raw:", String(data: data, encoding: .utf8) ?? "<binary>")        guard            let root = try? JSONSerialization.jsonObject(with: data) as? [String: Any],            let id   = root["id"] as? String        else {            throw NSError(domain: "MemoirAI",                          code: -2,                          userInfo: [NSLocalizedDescriptionKey: "Upload JSON missing id"])        }        return (id, jpg)           // ‚Üê return JPEG bytes so caller can inline if desired    }    init(apiKey: String, session: URLSession = .shared) {        print("[ImageContext] init")        self.openAI = OpenAIImageService(apiKey: apiKey, session: session)    }    func enrichPrompts(prompts: [ImagePrompt], withPhotos photos: [UIImage]) async throws -> [ImagePrompt] {        // ‚Ä¶ your existing enrichment code ‚Ä¶        return prompts    }}private func removingAgeMarkers(from raw: String) -> String {    let pattern = #"\b(elderly|old|young|teenager|teen|middle[- ]?aged|child|baby|infant|adult|aged|senior|youthful)\b"#    let cleaned = raw.replacingOccurrences(of: pattern,                                         with: "",                                         options: [.regularExpression, .caseInsensitive])                         .replacingOccurrences(of: #"[, ]{2,}"#,                // collapse doubles                                         with: ", ",                                         options: [.regularExpression])                         .trimmingCharacters(in: CharacterSet(charactersIn: ", ").union(.whitespacesAndNewlines))    return cleaned}struct ImagePrompt: Identifiable, Hashable {    let id = UUID()    let text: String    let referenceImageIDs: [String]}