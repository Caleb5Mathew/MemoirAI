////  ImageContext.swift//  MemoirAI////  Created by user941803 on 5/9/25.//  Updated 5/10/25 to align method signatures.//import Foundationimport UIKit// For a more structured logging approach in a production app, consider using OSLog.// import os.log // Uncomment if you want to use OSLog/// Associates generated text prompts with the user’s own photos,/// and—if photos exist—asks the OpenAI service to “enrich” each prompt/// by weaving in details from those images.actor ImageContext {    private let openAI: OpenAIImageService    // private static let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "ImageContext") // Example for OSLog    /// Inject your OpenAI image/text service    init(apiKey: String, session: URLSession = .shared) {        print("[ImageContext DEBUG] Initializing ImageContext...")        self.openAI = OpenAIImageService(apiKey: apiKey, session: session)        print("[ImageContext DEBUG] ImageContext initialized successfully with OpenAIImageService.")    }    /// For each prompt, if there are photos, invoke the OpenAI service    /// to tweak the prompt text to reference those photos; otherwise,    /// leave it unchanged.    ///    /// - Parameters:    ///   - prompts:    The array of ImagePrompts produced by PromptGenerator.    ///   - withPhotos: Up to 4 UIImages to use as context for all prompts.    /// - Returns: A new array of ImagePrompts, enriched where applicable.    func enrichPrompts(        prompts: [ImagePrompt],        withPhotos photos: [UIImage]    ) async throws -> [ImagePrompt] {        print("[ImageContext DEBUG] enrichPrompts called with \(prompts.count) prompts and \(photos.count) photos.")        // For more detailed photo info, you could log photo sizes or other metadata, but be mindful of PII.        // photos.enumerated().forEach { index, photo in        //     print("[ImageContext DEBUG] Photo \(index): \(photo.size)")        // }        var enriched: [ImagePrompt] = []        print("[ImageContext DEBUG] Starting to iterate through prompts.")        for (index, prompt) in prompts.enumerated() {            print("[ImageContext DEBUG] Processing prompt \(index + 1) of \(prompts.count): \"\(prompt.text)\" (ID: \(prompt.id))")            // If no photos provided, keep original            guard !photos.isEmpty else {                print("[ImageContext DEBUG] No photos provided for prompt \(index + 1). Keeping original prompt.")                enriched.append(prompt)                print("[ImageContext DEBUG] Added original prompt \(index + 1) to enriched list.")                continue            }            print("[ImageContext DEBUG] Photos provided. Attempting to enrich prompt \(index + 1) using OpenAI service.")            do {                // Ask the service to tweak the prompt using the user’s photos                print("[ImageContext DEBUG] Calling openAI.enrichPrompt for prompt: \"\(prompt.text)\" with \(photos.count) photos.")                let tweakedText = try await openAI.enrichPrompt(                    prompt.text,                    with: photos                )                print("[ImageContext DEBUG] Successfully received tweaked text for prompt \(index + 1): \"\(tweakedText)\"")                                let newEnrichedPrompt = ImagePrompt(text: tweakedText)                enriched.append(newEnrichedPrompt)                print("[ImageContext DEBUG] Added enriched prompt (ID: \(newEnrichedPrompt.id)) to list for original prompt \(index + 1).")            } catch {                print("[ImageContext ERROR] Failed to enrich prompt \(index + 1) (ID: \(prompt.id)): \"\(prompt.text)\". Error: \(error.localizedDescription)")                print("[ImageContext DEBUG] Adding original prompt \(index + 1) to enriched list due to enrichment error.")                // Decide on error handling: rethrow, or append original, or skip.                // Current behavior: appends original prompt if enrichment fails.                // If you want the whole operation to fail if one enrichment fails, you might rethrow here,                // or collect errors and throw a composite error at the end.                // For now, let's append the original prompt to allow other enrichments to proceed.                enriched.append(prompt) // Fallback to original prompt                 // If you want to propagate the error immediately, uncomment the line below:                 // throw error            }        }        print("[ImageContext DEBUG] Finished iterating through all prompts.")        print("[ImageContext DEBUG] enrichPrompts returning \(enriched.count) prompts.")        if prompts.count != enriched.count {            print("[ImageContext WARNING] Initial prompt count (\(prompts.count)) differs from final enriched prompt count (\(enriched.count)). This might be unexpected depending on error handling strategy.")        }        return enriched    }}