////  PromptReviewView.swift//  MemoirAI////  Created by user941803 on 5/10/25.//import SwiftUI// For a more structured logging approach in a production app, consider using OSLog.// import os.log // Uncomment if you want to use OSLogstruct PromptReviewView: View {    // private static let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "PromptReviewView") // Example for OSLog    @StateObject private var viewModel = PromptReviewViewModel()    @Environment(\.dismiss) private var dismiss    /// Inputs from previous screen    let transcript: String    let attachedPhotos: [UIImage]    let pageCount: Int    /// Controls navigation to the gallery    @State private var showGallery = false    // Initializer for the view itself (structs get memberwise initializers by default)    // We can't directly print in the implicit init, but onAppear will cover initial state.    // If a custom init was needed for other reasons, we could print there.    // init(transcript: String, attachedPhotos: [UIImage], pageCount: Int) {    //     self.transcript = transcript    //     self.attachedPhotos = attachedPhotos    //     self.pageCount = pageCount    //     print("[PromptReviewView DEBUG] Initializing with transcript (length: \(transcript.count)), photos: \(attachedPhotos.count), pageCount: \(pageCount)")    //     // _viewModel is initialized separately by @StateObject    // }    var body: some View {        let _ = print("[PromptReviewView DEBUG] body evaluating. isLoading: \(viewModel.isLoading), errorMessage: \(viewModel.errorMessage ?? "nil"), prompts: \(viewModel.prompts.count), images: \(viewModel.images.count), showGallery: \(showGallery)")        return VStack {            if viewModel.isLoading {                let _ = print("[PromptReviewView DEBUG] Displaying ProgressView (isLoading is true).")                ProgressView("Generatingâ€¦")                    .padding()            } else if let error = viewModel.errorMessage {                let _ = print("[PromptReviewView DEBUG] Displaying error message: \(error)")                Text("Error: \(error)")                    .foregroundColor(.red)                    .padding()            } else {                let _ = print("[PromptReviewView DEBUG] Displaying List of prompts. Count: \(viewModel.prompts.count)")                List {                    Section("Text Prompts") {                        if viewModel.prompts.isEmpty {                            let _ = print("[PromptReviewView DEBUG] No prompts to display in ForEach.")                            Text("No prompts generated yet.")                                .foregroundColor(.gray)                        } else {                            ForEach(viewModel.prompts) { prompt in                                let _ = print("[PromptReviewView DEBUG] ForEach: Displaying prompt ID \(prompt.id): \"\(prompt.text.prefix(50))...\"")                                Text(prompt.text)                                    .font(.body)                                    .padding(.vertical, 4)                            }                        }                    }                }                .listStyle(.insetGrouped)            }            Button(action: {                print("[PromptReviewView DEBUG] 'Generate Images' button tapped.")                generateAndNavigate()            }) {                Text("Generate Images")                    .font(.headline)                    .frame(maxWidth: .infinity)                    .padding()                    .background(Color.accentColor)                    .foregroundColor(.white)                    .cornerRadius(12)                    .padding(.horizontal)            }            .disabled(viewModel.isLoading)            .padding(.bottom)            let _ = print("[PromptReviewView DEBUG] 'Generate Images' button disabled state: \(viewModel.isLoading)")                        // Hidden nav link to ImageGalleryView            let _ = print("[PromptReviewView DEBUG] NavigationLink to ImageGalleryView created. isActive: \(showGallery). Images to pass: \(viewModel.images.count)")            NavigationLink(                destination: ImageGalleryView(images: viewModel.images)                               .onAppear { print("[PromptReviewView DEBUG] ImageGalleryView appeared via NavigationLink.") },                isActive: $showGallery            ) {                EmptyView()            }        }        .navigationTitle("Review Prompts")        .navigationBarTitleDisplayMode(.inline)        .onAppear {            print("[PromptReviewView DEBUG] onAppear: View has appeared.")            print("[PromptReviewView DEBUG] onAppear: Initial inputs - transcript length: \(transcript.count), attachedPhotos count: \(attachedPhotos.count), pageCount: \(pageCount)")            print("[PromptReviewView DEBUG] onAppear: ViewModel initial state - isLoading: \(viewModel.isLoading), errorMessage: \(viewModel.errorMessage ?? "nil"), prompts: \(viewModel.prompts.count), images: \(viewModel.images.count)")            // Optionally prefetch or refresh            // Example: If prompts should be loaded immediately based on inputs:            // Task {            //     print("[PromptReviewView DEBUG] onAppear: Triggering initial prompt generation.")            //     await viewModel.generatePrompts(transcript: transcript, pageCount: pageCount) // Assuming such a method exists            // }        }        .onDisappear {            print("[PromptReviewView DEBUG] onDisappear: View has disappeared.")        }        .onChange(of: showGallery) { newValue in            print("[PromptReviewView DEBUG] onChange: showGallery changed to \(newValue).")        }        .onChange(of: viewModel.isLoading) { newValue in            print("[PromptReviewView DEBUG] onChange: viewModel.isLoading changed to \(newValue).")        }        .onChange(of: viewModel.errorMessage) { newValue in            print("[PromptReviewView DEBUG] onChange: viewModel.errorMessage changed to \(newValue ?? "nil").")        }        .onChange(of: viewModel.prompts.count) { newValue in // Note: direct count observation might be tricky for complex objects.            print("[PromptReviewView DEBUG] onChange: viewModel.prompts.count changed to \(newValue).")        }         .onChange(of: viewModel.images.count) { newValue in            print("[PromptReviewView DEBUG] onChange: viewModel.images.count changed to \(newValue).")        }    }    private func generateAndNavigate() {        print("[PromptReviewView DEBUG] generateAndNavigate() called.")        Task {            print("[PromptReviewView DEBUG] generateAndNavigate: Task started. About to call viewModel.generateAndRender.")            print("[PromptReviewView DEBUG] generateAndNavigate: Parameters - transcript length: \(transcript.count), pageCount: \(pageCount), attachedPhotos count: \(attachedPhotos.count)")            await viewModel.generateAndRender(                transcript: transcript,                pageCount: pageCount,                attachedPhotos: attachedPhotos            )            print("[PromptReviewView DEBUG] generateAndNavigate: viewModel.generateAndRender completed.")            print("[PromptReviewView DEBUG] generateAndNavigate: After call - isLoading: \(viewModel.isLoading), errorMessage: \(viewModel.errorMessage ?? "nil"), images count: \(viewModel.images.count)")            if viewModel.errorMessage == nil {                print("[PromptReviewView DEBUG] generateAndNavigate: No error from ViewModel. Setting showGallery to true.")                showGallery = true            } else {                print("[PromptReviewView DEBUG] generateAndNavigate: Error found from ViewModel: \(viewModel.errorMessage!). Not navigating.")                // Optionally show an alert here if the Text view for error isn't prominent enough            }        }    }}// Assuming ImagePrompt structure for compilation/// Afterstruct ImagePrompt: Identifiable, Codable {  let id = UUID()  let text: String  let referenceImageIDs: [String]}struct PromptReviewView_Previews: PreviewProvider {    static var previews: some View {        let _ = print("[PromptReviewView_Previews DEBUG] Setting up previews.")        NavigationStack {            PromptReviewView(                transcript: "Once upon a time in a land far away, there was a brave knight and a friendly dragon.",                attachedPhotos: [UIImage(systemName: "photo") ?? UIImage()], // Example with one photo                pageCount: 3            )        }    }}