////  PromptReviewViewModel.swift//  MemoirAI////  Created by user941803 on 5/10/25.//  Updated 5/12/25 to use batch image generation//  Further updated to integrate art style settings and handle StoryPageContent//  Fixed "Extra argument 'id' in call" error.//import Foundationimport SwiftUI // Needed for @AppStorageimport UIKit// For a more structured logging approach in a production app, consider using OSLog.// import os.log // Uncomment if you want to use OSLog// Ensure ArtStyle enum is globally accessible// enum ArtStyle: String, CaseIterable, Identifiable { ... }// Ensure StoryPageContent struct is globally accessible (e.g., from Models.swift)// struct StoryPageContent: Identifiable {//     let id = UUID()//     let imagePromptText: String//     let pageDisplayText: String// }// Assuming ImagePrompt is also globally accessible (or defined in a shared Models file)// For the fix, we assume ImagePrompt's initializer is ImagePrompt(text: String)// or ImagePrompt(id: UUID = UUID(), text: String) where id is optional or has a default.// If ImagePrompt struct is simply:// struct ImagePrompt: Identifiable { let id = UUID(); var text: String }// Then its memberwise initializer is ImagePrompt(text: String)//// If ImagePrompt is:// struct ImagePrompt { var text: String }// Then its memberwise initializer is ImagePrompt(text: String)@MainActorclass PromptReviewViewModel: ObservableObject {    // private static let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "PromptReviewViewModel")    // This will hold the full content (image prompt + page text)    @Published var storyContents: [StoryPageContent] = []        // This will hold ImagePrompt objects derived from storyContents.imagePromptText    // for compatibility with existing ImageContext, OpenAIImageService, and potentially PromptReviewView    @Published var prompts: [ImagePrompt] = []    @Published var enrichedPrompts: [ImagePrompt] = [] // This will also be [ImagePrompt]        @Published var images: [UIImage] = []    @Published var isLoading: Bool = false    @Published var errorMessage: String?    // Settings from AppStorage for art style    @AppStorage("memoirArtStyle") private var selectedArtStyleRawValue: String = ArtStyle.realistic.rawValue    @AppStorage("memoirCustomArtStyleText") private var customArtStyleText: String = ""    // Page count for this specific review session will be passed as a parameter to generateAndRender    private var currentArtStyle: ArtStyle {        ArtStyle(rawValue: selectedArtStyleRawValue) ?? .realistic    }    private let promptGen: PromptGenerator    private let imageCtx: ImageContext    private let imageSvc: OpenAIImageService    init() {        print("[PromptReviewViewModel DEBUG] Initializing...")        let apiKey = Bundle.main            .object(forInfoDictionaryKey: "OPENAI_API_KEY") as? String ?? ""        if apiKey.isEmpty {            print("[PromptReviewViewModel WARNING] API Key is EMPTY. Services might not function correctly.")        } else {            print("[PromptReviewViewModel DEBUG] API Key loaded successfully (length: \(apiKey.count)). Using prefix: \(apiKey.prefix(5))...")        }        self.promptGen = PromptGenerator(apiKey: apiKey)        self.imageCtx  = ImageContext(apiKey: apiKey)        self.imageSvc = OpenAIImageService.shared        print("[PromptReviewViewModel DEBUG] Services initialized (PromptGen, ImageContext, ImageSvc using \(self.imageSvc === OpenAIImageService.shared ? "shared instance" : "new instance")).")                print("[PromptReviewViewModel DEBUG] Initialization complete. isLoading: \(isLoading), errorMessage: \(errorMessage ?? "nil")")        print("[PromptReviewViewModel DEBUG] Initial settings - Art Style: \(currentArtStyle.rawValue), Custom Text: '\(customArtStyleText.isEmpty ? "none" : customArtStyleText)'")    }    /// Orchestrates: transcript → [StoryPageContent] (image prompts + page text) → enrichment of image prompts → batch image generation    func generateAndRender(        transcript: String,        pageCount: Int, // This pageCount is specific to this review session        attachedPhotos: [UIImage]    ) async {        print("[PromptReviewViewModel DEBUG] generateAndRender called.")        print("[PromptReviewViewModel DEBUG]   Parameters: transcript length: \(transcript.count), pageCount: \(pageCount), attachedPhotos count: \(attachedPhotos.count)")        print("[PromptReviewViewModel DEBUG]   Using Art Style from settings: \(currentArtStyle.rawValue), Custom Details: '\(customArtStyleText.isEmpty ? "none" : customArtStyleText)'")        isLoading = true        print("[PromptReviewViewModel DEBUG] isLoading set to true.")        errorMessage = nil        storyContents = []        prompts = []        enrichedPrompts = []        images = []        print("[PromptReviewViewModel DEBUG] Cleared previous error message and data arrays.")        defer {            isLoading = false            print("[PromptReviewViewModel DEBUG] DEFER: isLoading set to false.")        }        do {            print("[PromptReviewViewModel DEBUG] generateAndRender: Starting generation process.")            print("[PromptReviewViewModel DEBUG] Step 1: Calling promptGen.generatePrompts...")            let rawStoryContents = try await promptGen.generatePrompts(                from: transcript,                pageCount: pageCount,                chosenArtStyle: currentArtStyle,                customArtStyleDetails: customArtStyleText            )            print("[PromptReviewViewModel DEBUG] Step 1: promptGen.generatePrompts returned \(rawStoryContents.count) StoryPageContent items.")                        self.storyContents = rawStoryContents            print("[PromptReviewViewModel DEBUG] self.storyContents updated. Count: \(self.storyContents.count)")            // Derive ImagePrompts from StoryPageContent            // FIXED: Removed 'id' parameter from ImagePrompt initialization            self.prompts = rawStoryContents.map { content in                ImagePrompt(text: content.imagePromptText)            }            print("[PromptReviewViewModel DEBUG] self.prompts (derived for image generation) updated. Count: \(self.prompts.count)")                        rawStoryContents.enumerated().forEach { index, content in                print("[PromptReviewViewModel DEBUG]   StoryContent \(index + 1) (ID: \(content.id)):") // content.id is from StoryPageContent                print("[PromptReviewViewModel DEBUG]     Image Prompt Text: \"\(content.imagePromptText.prefix(80))...\"")                print("[PromptReviewViewModel DEBUG]     Page Display Text: \"\(content.pageDisplayText.prefix(80))...\"")            }            guard !self.prompts.isEmpty else {                print("[PromptReviewViewModel ERROR] No valid prompts (imagePromptText) were generated or derived.")                let noPromptsError = NSError(                    domain: "PromptReviewViewModel.generatePrompts",                    code: 1,                    userInfo: [NSLocalizedDescriptionKey: "The AI could not generate scenes from the transcript with the current style settings. Please try adjusting settings or provide a different transcript."]                )                self.errorMessage = noPromptsError.localizedDescription                throw noPromptsError            }            print("[PromptReviewViewModel DEBUG] Step 2: Calling imageCtx.enrichPrompts with \(self.prompts.count) derived image prompts and \(attachedPhotos.count) photos...")            let enrichedImagePrompts = try await imageCtx.enrichPrompts(                prompts: self.prompts,                withPhotos: attachedPhotos            )            self.enrichedPrompts = enrichedImagePrompts            print("[PromptReviewViewModel DEBUG] self.enrichedPrompts updated. Count: \(self.enrichedPrompts.count)")            enrichedPrompts.enumerated().forEach { index, prompt in                 // Assuming ImagePrompt now has an auto-generated ID or no ID relevant here                 print("[PromptReviewViewModel DEBUG]   Enriched ImagePrompt \(index + 1): \"\(prompt.text.prefix(80))...\"")            }            print("[PromptReviewViewModel DEBUG] Step 3: Calling imageSvc.generateImages with \(self.enrichedPrompts.count) enriched image prompts...")            let uiImages = try await imageSvc.generateImages(                from: self.enrichedPrompts            )            self.images = uiImages            print("[PromptReviewViewModel DEBUG] self.images updated. Count: \(self.images.count)")                        if self.images.isEmpty && !self.enrichedPrompts.isEmpty {                print("[PromptReviewViewModel WARNING] Successfully generated enriched prompts but no images were returned from imageSvc.")            }            print("[PromptReviewViewModel DEBUG] generateAndRender: Successfully completed all steps.")        } catch {            print("[PromptReviewViewModel ERROR] Error caught in generateAndRender: \(error)")            print("[PromptReviewViewModel ERROR]   Localized description: \(error.localizedDescription)")            if self.errorMessage == nil {                self.errorMessage = error.localizedDescription            }            print("[PromptReviewViewModel DEBUG] self.errorMessage updated: \"\(self.errorMessage ?? "nil")\"")        }        print("[PromptReviewViewModel DEBUG] generateAndRender finished execution.")    }}