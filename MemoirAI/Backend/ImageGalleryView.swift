////  ImageGalleryView.swift//  MemoirAI////  Created by user941803 on 5/10/25.//import SwiftUI// For a more structured logging approach in a production app, consider using OSLog.// import os.log // Uncomment if you want to use OSLogstruct ImageGalleryView: View {    // private static let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "ImageGalleryView") // Example for OSLog    @StateObject private var viewModel: ImageGalleryViewModel    private let columns = [        GridItem(.flexible()),        GridItem(.flexible())    ]    /// Initialize with the images you want to display    init(images: [UIImage]) {        // Note: Direct print here might be too early if viewModel isn't fully set up.        // The effective initialization of the viewModel happens when StateObject wraps it.        let initialViewModel = ImageGalleryViewModel(images: images)        _viewModel = StateObject(wrappedValue: initialViewModel)        print("[ImageGalleryView DEBUG] Initializing with \(images.count) images.")        // You could also log some characteristics of the images if helpful, e.g., their sizes,        // but be mindful of console spam if there are many images or large data.        // images.enumerated().forEach { index, img in        //     print("[ImageGalleryView DEBUG] Init - Image \(index) size: \(img.size)")        // }    }    var body: some View {        // This print will occur every time the body is re-evaluated.        print("[ImageGalleryView DEBUG] Body evaluating. Number of images in ViewModel: \(viewModel.images.count). Selected image is \(viewModel.selectedImage == nil ? "nil" : "set").")        return ZStack {            // Match your appâ€™s background            Color(red: 1.0, green: 0.96, blue: 0.89)                .ignoresSafeArea()            ScrollView {                // Log when the ScrollView content (LazyVGrid) is about to be laid out.                let _ = print("[ImageGalleryView DEBUG] ScrollView content (LazyVGrid) rendering. Image count: \(viewModel.images.count)")                if viewModel.images.isEmpty {                    let _ = print("[ImageGalleryView DEBUG] No images to display in the grid.")                    // Optionally, display a message to the user in the UI as well                    Text("No images to display.")                        .padding()                        .foregroundColor(.gray)                } else {                    LazyVGrid(columns: columns, spacing: 16) {                        ForEach(viewModel.images.indices, id: \.self) { idx in                            // This can be very verbose if you have many images.                            // Consider logging only if a specific condition is met or less frequently.                            let _ = print("[ImageGalleryView DEBUG] ForEach: Creating view for image at index \(idx).")                                                        let img = viewModel.images[idx] // Make sure this access is safe if viewModel.images can change rapidly                                                        Image(uiImage: img)                                .resizable()                                .scaledToFill()                                .frame(height: 150)                                .clipped()                                .cornerRadius(12)                                .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)                                .onTapGesture {                                    print("[ImageGalleryView DEBUG] Image at index \(idx) tapped. Calling viewModel.select(). Image size: \(img.size)")                                    viewModel.select(img)                                }                        }                    }                    .padding()                }            }            .navigationTitle("Your Storybook")            .navigationBarTitleDisplayMode(.inline)            // Full-screen preview overlay            if let selected = viewModel.selectedImage {                let _ = print("[ImageGalleryView DEBUG] Displaying full-screen preview for selected image. Image size: \(selected.size)")                                Color.black.opacity(0.7)                    .ignoresSafeArea()                    .transition(.opacity)                    .zIndex(1)                    .onTapGesture { // Allow dismissing by tapping the background overlay                        print("[ImageGalleryView DEBUG] Background overlay tapped for full-screen image. Calling viewModel.deselect().")                        viewModel.deselect()                    }                VStack {                    Spacer()                    Image(uiImage: selected)                        .resizable()                        .scaledToFit()                        .cornerRadius(16)                        .padding()                        .onTapGesture {                            // Prevents the background overlay tap from dismissing if the image itself is tapped.                            // Or, you could add specific behavior for tapping the image in full screen.                            print("[ImageGalleryView DEBUG] Full-screen image content tapped.")                        }                    Spacer()                    Button("Close") {                        print("[ImageGalleryView DEBUG] 'Close' button tapped for full-screen image. Calling viewModel.deselect().")                        viewModel.deselect()                    }                    .font(.headline)                    .padding(.horizontal, 24)                    .padding(.vertical, 12)                    .background(Color.white)                    .cornerRadius(12)                    .shadow(radius: 4)                    .padding(.bottom, 32)                }                .transition(.move(edge: .bottom).combined(with: .opacity))                .zIndex(2)            } else {                // This else block for the `if let selected` will execute when selectedImage is nil.                // Add a print statement here if you want to explicitly log when the full-screen view is NOT shown.                // However, the main body log already indicates if selectedImage is nil.                // let _ = print("[ImageGalleryView DEBUG] No image selected for full-screen preview.")            }        }        .onAppear {            print("[ImageGalleryView DEBUG] View did appear.")        }        .onDisappear {            print("[ImageGalleryView DEBUG] View did disappear.")        }    }}struct ImageGalleryView_Previews: PreviewProvider {    static var previews: some View {        // Create sample UIImages for the preview        let sampleImages: [UIImage] = [            UIImage(systemName: "photo") ?? UIImage(),            UIImage(systemName: "photo.fill") ?? UIImage(),            UIImage(systemName: "photo.on.rectangle") ?? UIImage(),            UIImage(systemName: "person.crop.circle") ?? UIImage(),            UIImage(systemName: "house.fill") ?? UIImage()        ].compactMap { $0 } // Ensure no nil images if systemName fails        // Print a message for preview setup        let _ = print("[ImageGalleryView_Previews DEBUG] Setting up previews with \(sampleImages.count) sample images.")        return NavigationStack {            ImageGalleryView(images: sampleImages)        }    }}