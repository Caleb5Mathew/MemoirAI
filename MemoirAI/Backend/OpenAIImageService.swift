import Foundationimport UIKitactor OpenAIImageService {    private let apiKey: String    private let session: URLSession    init(apiKey: String, session: URLSession = .shared) {        self.apiKey  = apiKey        self.session = session        print("[OpenAIImageService DEBUG] booted – key prefix: \(apiKey.prefix(5))…")    }    /// Generate `n` images at `size` for a single text `prompt`,    /// using any number of reference-image IDs to guide subject/look.    func generateImages(        prompt: String,        referencedImageIDs: [String],        n: Int = 1,        size: String = "1024x1024"    ) async throws -> [UIImage] {        // 1) build JSON payload including references        var body: [String: Any] = [            "model"           : "dall-e-3",            "prompt"          : prompt,            "n"               : n,            "size"            : size,            "response_format" : "url"        ]        if !referencedImageIDs.isEmpty {            body["reference_image_ids"] = referencedImageIDs        }        var req = URLRequest(url: URL(string: "https://api.openai.com/v1/images/generations")!)        req.httpMethod = "POST"        req.addValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")        req.addValue("application/json", forHTTPHeaderField: "Content-Type")        req.httpBody = try JSONSerialization.data(withJSONObject: body)        // 2) send        let (data, resp) = try await session.data(for: req)        guard let http = resp as? HTTPURLResponse else {            throw URLError(.badServerResponse)        }        print("[OpenAIImageService DEBUG] HTTP status: \(http.statusCode)")        guard (200...299).contains(http.statusCode) else {            let raw = String(data: data, encoding: .utf8) ?? "(binary)"            print("[OpenAIImageService ERROR] API \(http.statusCode):\n\(raw)")            throw NSError(domain: "OpenAI",                          code: http.statusCode,                          userInfo: [NSLocalizedDescriptionKey: "Image API failed", "body": raw])        }        // 3) decode URLs        struct Response: Decodable {            struct Entry: Decodable { let url: String? }            let data: [Entry]        }        let decoded = try JSONDecoder().decode(Response.self, from: data)        let urls    = decoded.data.compactMap { URL(string: $0.url ?? "") }        // 4) download images        var images: [UIImage] = []        for url in urls {            let (imgData, imgResp) = try await session.data(from: url)            if let imgHttp = imgResp as? HTTPURLResponse, imgHttp.statusCode == 200,               let ui = UIImage(data: imgData) {                images.append(ui)            }        }        print("[OpenAIImageService DEBUG] downloaded \(images.count) images")        return images    }    /// Convenience overload: no references    func generateImages(        prompt: String,        n: Int = 1,        size: String = "1024x1024"    ) async throws -> [UIImage] {        return try await generateImages(            prompt: prompt,            referencedImageIDs: [],            n: n,            size: size        )    }    /// Batch-helper: generate `n` images per prompt for an array of ImagePrompt    /// (now including each prompt’s own referenceImageIDs).    func generateImages(        from prompts: [ImagePrompt],        n: Int = 1,        size: String = "1024x1024"    ) async throws -> [UIImage] {        var all: [UIImage] = []        for p in prompts {            let imgs = try await generateImages(                prompt: p.text,                referencedImageIDs: p.referenceImageIDs,                n: n,                size: size            )            all.append(contentsOf: imgs)        }        return all    }    /// Style-cue “enrichPrompt” – for adding style hints before actual DALL·E call.    /// Style‐cue enrichment. Preserve the entire prompt, then tack on your style hint.    func enrichPrompt(_ prompt: String, with ref: UIImage) async throws -> String {        return """        \(prompt)        Match the colour palette, flat torn-paper texture, and        blocky-silhouette style of the reference image.        """    }}