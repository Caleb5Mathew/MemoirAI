import SwiftUI// ArtStyle Enum - ensure this is defined once globally or is accessible.enum ArtStyle: String, CaseIterable, Identifiable {    case realistic = "Realistic"    case cartoon = "Cartoon"    case kidsBook = "Kid's Book"    case custom = "Custom"    var id: String { self.rawValue }    var placeholderSymbolName: String {        switch self {        case .realistic: return "photo.artframe"        case .cartoon: return "face.smiling.fill"        case .kidsBook: return "book.closed.fill"        case .custom: return "wand.and.stars.inverse"        }    }}struct SettingsView: View {    @Environment(\.dismiss) private var dismiss    // Define colors directly    let softCream = Color(red: 0.98, green: 0.96, blue: 0.89)    let terracotta = Color(red: 0.82, green: 0.45, blue: 0.32)    let subtleGray = Color.gray.opacity(0.5)    let darkText = Color.black.opacity(0.8)    let textFieldBackgroundColor = Color.white.opacity(0.5)    // Settings States linked to AppStorage for persistence    @AppStorage("memoirPageCount") var pageCountSetting: Int = 2   // âœ… OK    @AppStorage("memoirArtStyle") private var selectedArtStyleRawValue: String = ArtStyle.realistic.rawValue    @AppStorage("memoirCustomArtStyleText") private var customArtStyleText: String = ""        // New AppStorage variables for advanced settings    @AppStorage("memoirEthnicity") private var ethnicity: String = ""    @AppStorage("memoirGender") private var gender: String = ""    @AppStorage("memoirOtherPersonalDetails") private var otherPersonalDetails: String = ""    // Local @State to bridge Double for Slider and Int for AppStorage    @State private var sliderPageCount: Double = 10.0        // State to control visibility of advanced settings    @State private var showAdvancedSettings: Bool = false    // Computed property to GET the ArtStyle enum    private var currentSelectedArtStyle: ArtStyle {        ArtStyle(rawValue: selectedArtStyleRawValue) ?? .realistic    }    private let artStyleColumns: [GridItem] = [        GridItem(.flexible(), spacing: 16),        GridItem(.flexible(), spacing: 16)    ]    private func customSerifFont(size: CGFloat) -> Font {        .system(size: size, design: .serif)    }    var body: some View {        ZStack {            softCream                .ignoresSafeArea()                .overlay(                    Image("paper_texture") // Ensure this image is in your asset catalog                        .resizable()                        .scaledToFill()                        .opacity(0.05)                        .ignoresSafeArea()                )            VStack(spacing: 20) {                HStack {                    Button(action: { dismiss() }) {                        Image(systemName: "chevron.left")                            .font(.system(size: 18, weight: .medium))                            .foregroundColor(darkText)                            .padding(10)                            .background(Color.black.opacity(0.07))                            .clipShape(Circle())                    }                    Spacer()                    Text("Settings")                        .font(customSerifFont(size: 24))                        .foregroundColor(darkText)                    Spacer()                    Circle().fill(Color.clear).frame(width: 38, height: 38) // Balance visually                }                .padding(.horizontal)                .padding(.top, 12)                ScrollView {                    VStack(alignment: .leading, spacing: 30) {                        VStack(alignment: .leading, spacing: 10) {                            Text("Number of Pages")                                .font(customSerifFont(size: 20))                                .foregroundColor(darkText)                                                        HStack {                                Text("Pages: \(pageCountSetting)") // Display from AppStorage                                    .font(.system(size: 16, design: .rounded))                                    .foregroundColor(darkText)                                Spacer()                            }                            Slider(value: $sliderPageCount, in: 1...15, step: 1) {                                Text("Number of Pages")                            } minimumValueLabel: {                                Text("1").font(.caption).foregroundColor(subtleGray)                            } maximumValueLabel: {                                Text("15").font(.caption).foregroundColor(subtleGray)                            }                            .tint(terracotta)                            .onChange(of: sliderPageCount) { newValue in                                pageCountSetting = Int(newValue) // Update AppStorage Int                            }                        }                        .padding()                        .background(Color.black.opacity(0.03))                        .cornerRadius(12)                        VStack(alignment: .leading, spacing: 10) {                            Text("Choose Art Style")                                .font(customSerifFont(size: 20))                                .foregroundColor(darkText)                            LazyVGrid(columns: artStyleColumns, spacing: 16) {                                ForEach(ArtStyle.allCases) { style in                                    ArtStyleButton(                                        style: style,                                        isSelected: currentSelectedArtStyle == style,                                        selectedBorderColor: terracotta,                                        selectedBackgroundColor: terracotta.opacity(0.15),                                        defaultBackgroundColor: Color.white.opacity(0.4),                                        defaultBorderColor: subtleGray.opacity(0.5),                                        selectedTextColor: terracotta,                                        defaultTextColor: darkText.opacity(0.9),                                        selectedSymbolColor: terracotta,                                        defaultSymbolColor: darkText.opacity(0.7)                                    ) {                                        self.selectedArtStyleRawValue = style.rawValue                                        // print("Selected art style: \(style.rawValue)")                                    }                                }                            }                            // Conditional TextField for Custom Art Style                            if currentSelectedArtStyle == .custom {                                VStack(alignment: .leading, spacing: 5) {                                    Text("Describe your custom style:")                                        .font(.system(size: 14, weight: .medium, design: .rounded))                                        .foregroundColor(darkText.opacity(0.8))                                        .padding(.top, 10)                                                                        TextField("e.g., 'impressionistic oil painting', 'vintage sci-fi poster'", text: $customArtStyleText, axis: .vertical)                                        .font(.system(size: 15))                                        .padding(10)                                        .background(textFieldBackgroundColor)                                        .cornerRadius(8)                                        .overlay(                                            RoundedRectangle(cornerRadius: 8)                                                .stroke(subtleGray.opacity(0.7), lineWidth: 1)                                        )                                        .lineLimit(1...3)                                        .tint(terracotta)                                }                                .padding(.top, 5)                                .transition(.opacity.combined(with: .slide))                            }                        }                        .padding()                        .background(Color.black.opacity(0.03))                        .cornerRadius(12)                        .animation(.easeInOut, value: currentSelectedArtStyle)                        //                        VStack(alignment: .leading, spacing: 10) {//                            Button(action: {//                                withAnimation(.spring()) {//                                    showAdvancedSettings.toggle()//                                }//                            }) {////                                HStack {////                                    Text("Advanced Personalization")////                                        .font(customSerifFont(size: 20))////                                        .foregroundColor(darkText)////                                    Spacer()////                                    Image(systemName: "chevron.right")////                                        .font(.system(size: 16, weight: .semibold))////                                        .foregroundColor(darkText.opacity(0.7))////                                        .rotationEffect(.degrees(showAdvancedSettings ? 90 : 0))////                                }////                                .padding(.vertical, 5) // Add some vertical padding to make the button taller//                            }//                            .buttonStyle(PlainButtonStyle()) // Use PlainButtonStyle for custom button appearance////                            if showAdvancedSettings {//                                // Ethnicity Field//                                VStack(alignment: .leading, spacing: 5) {//                                    Text("Ethnicity (Optional)")//                                        .font(.system(size: 14, weight: .medium, design: .rounded))//                                        .foregroundColor(darkText.opacity(0.8))//                                    TextField("e.g., 'Japanese', 'African American', 'Hispanic'", text: $ethnicity)//                                        .font(.system(size: 15))//                                        .padding(10)//                                        .background(textFieldBackgroundColor)//                                        .cornerRadius(8)//                                        .overlay(//                                            RoundedRectangle(cornerRadius: 8)//                                                .stroke(subtleGray.opacity(0.7), lineWidth: 1)//                                        )//                                        .tint(terracotta)//                                }//                                .padding(.top, 10)//                                .transition(.opacity.combined(with: .slide))////                                // Gender Field//                                VStack(alignment: .leading, spacing: 5) {//                                    Text("Gender (Optional)")//                                        .font(.system(size: 14, weight: .medium, design: .rounded))//                                        .foregroundColor(darkText.opacity(0.8))//                                    TextField("e.g., 'Woman', 'Man', 'Non-binary'", text: $gender)//                                        .font(.system(size: 15))//                                        .padding(10)//                                        .background(textFieldBackgroundColor)//                                        .cornerRadius(8)//                                        .overlay(//                                            RoundedRectangle(cornerRadius: 8)//                                                .stroke(subtleGray.opacity(0.7), lineWidth: 1)//                                        )//                                        .tint(terracotta)//                                }//                                .padding(.top, 10)//                                .transition(.opacity.combined(with: .slide))//                                //                                // Other Personal Details Field//                                VStack(alignment: .leading, spacing: 5) {//                                    Text("Other Personal Details (Optional)")//                                        .font(.system(size: 14, weight: .medium, design: .rounded))//                                        .foregroundColor(darkText.opacity(0.8))//                                    TextField("e.g., 'Wears glasses', 'Has a scar on left cheek'", text: $otherPersonalDetails, axis: .vertical)//                                        .font(.system(size: 15))//                                        .padding(10)//                                        .background(textFieldBackgroundColor)//                                        .cornerRadius(8)//                                        .overlay(//                                            RoundedRectangle(cornerRadius: 8)//                                                .stroke(subtleGray.opacity(0.7), lineWidth: 1)//                                        )//                                        .lineLimit(1...3)//                                        .tint(terracotta)//                                }//                                .padding(.top, 10)//                                .transition(.opacity.combined(with: .slide))//                            }//                        }//                        .padding()//                        .background(Color.black.opacity(0.03))//                        .cornerRadius(12)//                                                Spacer() // Pushes content to the top                    }                    .padding(.horizontal)                    .padding(.top, 10)                }            }        }        .navigationBarBackButtonHidden(true)        .onAppear {            sliderPageCount = Double(pageCountSetting)            // print("SettingsView appeared. Pages: \(pageCountSetting), Style: \(selectedArtStyleRawValue), Custom Text: \(customArtStyleText)")            // print("Advanced Settings - Ethnicity: \(ethnicity), Gender: \(gender), Other: \(otherPersonalDetails)")        }    }}// ArtStyleButton struct remains the samestruct ArtStyleButton: View {    let style: ArtStyle    let isSelected: Bool        let selectedBorderColor: Color    let selectedBackgroundColor: Color    let defaultBackgroundColor: Color    let defaultBorderColor: Color    let selectedTextColor: Color    let defaultTextColor: Color    let selectedSymbolColor: Color    let defaultSymbolColor: Color        let action: () -> Void    var body: some View {        Button(action: action) {            ZStack {                RoundedRectangle(cornerRadius: 12)                    .fill(isSelected ? selectedBackgroundColor : defaultBackgroundColor)                    .overlay(                        RoundedRectangle(cornerRadius: 12)                            .stroke(isSelected ? selectedBorderColor : defaultBorderColor, lineWidth: isSelected ? 2.5 : 1.5)                    )                    .aspectRatio(1.0, contentMode: .fit)                VStack {                    Spacer()                    Image(systemName: style.placeholderSymbolName)                        .font(.system(size: 30, weight: .light))                        .foregroundColor(isSelected ? selectedSymbolColor : defaultSymbolColor)                        .padding(.bottom, 5)                                        Text(style.rawValue)                        .font(.system(size: 14, weight: .medium, design: .rounded))                        .foregroundColor(isSelected ? selectedTextColor : defaultTextColor)                        .fixedSize(horizontal: false, vertical: true)                        .multilineTextAlignment(.center)                    Spacer()                }                .padding(8)            }        }        .buttonStyle(PlainButtonStyle())        .scaleEffect(isSelected ? 1.05 : 1.0)        .animation(.spring(response: 0.3, dampingFraction: 0.6), value: isSelected)    }}struct SettingsView_Previews: PreviewProvider {    static var previews: some View {        // It's good practice to wrap views that might be part of a navigation flow        // in a NavigationStack or NavigationView for previews.        NavigationStack {            SettingsView()        }    }}