import SwiftUI// ArtStyle Enum - ensure this is defined once globally or is accessible.enum ArtStyle: String, CaseIterable, Identifiable {    case realistic = "Realistic"    case cartoon = "Cartoon"    case kidsBook = "Kid's Book"    case custom = "Custom"    var id: String { self.rawValue }    var placeholderSymbolName: String {        switch self {        case .realistic: return "photo.artframe"        case .cartoon: return "face.smiling.fill"        case .kidsBook: return "book.closed.fill"        case .custom: return "wand.and.stars.inverse"        }    }}struct SettingsView: View {    @Environment(\.dismiss) private var dismiss    @EnvironmentObject var subscriptionManager: RCSubscriptionManager    // Define colors directly    let softCream = Color(red: 0.98, green: 0.96, blue: 0.89)    let terracotta = Color(red: 0.82, green: 0.45, blue: 0.32)    let subtleGray = Color.gray.opacity(0.5)    let darkText = Color.black.opacity(0.8)    let textFieldBackgroundColor = Color.white.opacity(0.5)    // Settings States linked to AppStorage for persistence    @AppStorage("memoirPageCount") var pageCountSetting: Int = 2   // ✅ OK    @AppStorage("memoirArtStyle") private var selectedArtStyleRawValue: String = ArtStyle.realistic.rawValue    @AppStorage("memoirCustomArtStyleText") private var customArtStyleText: String = ""        // New AppStorage variables for advanced settings    @AppStorage("memoirEthnicity") private var ethnicity: String = ""    @AppStorage("memoirGender") private var gender: String = ""    @AppStorage("memoirOtherPersonalDetails") private var otherPersonalDetails: String = ""    // Local @State to bridge Double for Slider and Int for AppStorage    @State private var sliderPageCount: Double = 2.0        // State to control visibility of advanced settings    @State private var showAdvancedSettings: Bool = false    @State private var generationAdvice: String? = nil    // Developer Key    @State private var devKey: String = ""    @State private var showDevSuccess: Bool = false    @State private var devSectionRevealed: Bool = false    // Computed property to GET the ArtStyle enum    private var currentSelectedArtStyle: ArtStyle {        ArtStyle(rawValue: selectedArtStyleRawValue) ?? .realistic    }    private let artStyleColumns: [GridItem] = [        GridItem(.flexible(), spacing: 16),        GridItem(.flexible(), spacing: 16)    ]    private func customSerifFont(size: CGFloat) -> Font {        .system(size: size, design: .serif)    }    private var isSubscribed: Bool { subscriptionManager.hasActiveSubscription }    private var maxSelectablePages: Int { isSubscribed ? 50 : FreePreviewConfig.maxPagesWithoutSubscription }    // ✨ Computed properties for warnings    private var generationWarning: String? {        subscriptionManager.getGenerationAdvice(for: pageCountSetting)    }        private var isLargeGeneration: Bool {        subscriptionManager.isLargeGeneration(pages: pageCountSetting)    }    // Utility – keep the stored value inside the current allowed range    private func clampPageCountIfNeeded() {        let maxAllowed = isSubscribed ? 50 : FreePreviewConfig.maxPagesWithoutSubscription        if pageCountSetting > maxAllowed {            pageCountSetting = maxAllowed            sliderPageCount  = Double(maxAllowed)        }    }    var body: some View {        ZStack {            softCream                .ignoresSafeArea()                .overlay(                    Image("paper_texture") // Ensure this image is in your asset catalog                        .resizable()                        .scaledToFill()                        .opacity(0.05)                        .ignoresSafeArea()                )            VStack(spacing: 20) {                HStack {                    Button(action: { dismiss() }) {                        Image(systemName: "chevron.left")                            .font(.system(size: 18, weight: .medium))                            .foregroundColor(darkText)                            .padding(10)                            .background(Color.black.opacity(0.07))                            .clipShape(Circle())                    }                    Spacer()                    Text("Settings")                        .font(customSerifFont(size: 24))                        .foregroundColor(darkText)                    Spacer()                    Circle().fill(Color.clear).frame(width: 38, height: 38) // Balance visually                }                .padding(.horizontal)                .padding(.top, 12)                ScrollView {                    VStack(alignment: .leading, spacing: 30) {                        // ✨ ENHANCED: Smart page count section with 1-50 range                        VStack(alignment: .leading, spacing: 12) {                            Text("Number of Memories")                                .font(customSerifFont(size: 20))                                .foregroundColor(darkText)                                                        // ✨ Clear explanation                            Text("Each memory generates 1 AI image. You have \(subscriptionManager.remainingAllowance)/50 images remaining this month.")                                .font(.system(size: 14))                                .foregroundColor(.gray)                                                        HStack {                                Text("Memories: \(pageCountSetting)")                                    .font(.system(size: 16, design: .rounded))                                    .foregroundColor(darkText)                                Spacer()                                                                // ✨ Image cost indicator with color coding                                HStack(spacing: 4) {                                    Image(systemName: "photo")                                        .font(.caption)                                    Text("\(pageCountSetting) images")                                        .font(.caption)                                }                                .foregroundColor(isLargeGeneration ? .orange : .gray)                            }                            // ✨ 1-50 slider with visual feedback                            VStack(spacing: 16) {                                HStack {                                    Text("Memoir Pages")                                        .font(.headline)                                                                        Spacer()                                                                        // ✨ Show monthly allowance status                                    Text(subscriptionManager.monthlyAllowanceStatus)                                        .font(.caption)                                        .foregroundColor(.secondary)                                }                                                                HStack {                                    Text("1")                                    if isSubscribed {                                        Slider(value: $sliderPageCount, in: 1...50, step: 1)                                            .onChange(of: sliderPageCount) { _, newValue in                                                if let advice = subscriptionManager.getGenerationAdvice(for: Int(newValue)) {                                                    generationAdvice = advice                                                } else { generationAdvice = nil }                                            }                                    } else {                                        Slider(value: $sliderPageCount, in: 1...Double(FreePreviewConfig.maxPagesWithoutSubscription), step: 1)                                            .onChange(of: sliderPageCount) { _, _ in generationAdvice = nil }                                    }                                    Text(isSubscribed ? "50" : "\(FreePreviewConfig.maxPagesWithoutSubscription)")                                }                                                                Text("Pages: \(Int(sliderPageCount))")                                    .font(.subheadline)                                                                // ✨ Show advice if any                                if let advice = generationAdvice {                                    Text(advice)                                        .font(.caption)                                        .foregroundColor(.orange)                                        .multilineTextAlignment(.center)                                        .padding(.horizontal)                                }                            }                                                        // ✨ Subscription trial notice                            if !isSubscribed {                                HStack(alignment: .top, spacing: 8) {                                    Image(systemName: "info.circle.fill")                                        .foregroundColor(.blue)                                        .font(.system(size: 14))                                    Text("Free users can generate up to \(FreePreviewConfig.maxPagesWithoutSubscription) images in their preview. Subscribe to unlock 50 new images every month.")                                        .font(.system(size: 13))                                        .foregroundColor(.gray)                                        .fixedSize(horizontal: false, vertical: true)                                }                                .padding(.top, 4)                            }                            // ✨ Smart warnings based on selection (subscribers only)                            if isSubscribed, let warning = generationWarning {                                HStack(alignment: .top, spacing: 8) {                                    Image(systemName: isLargeGeneration ? "exclamationmark.triangle.fill" : "info.circle.fill")                                        .foregroundColor(isLargeGeneration ? .orange : .blue)                                        .font(.system(size: 14))                                                                        Text(warning)                                        .font(.system(size: 13))                                        .foregroundColor(.gray)                                        .fixedSize(horizontal: false, vertical: true)                                }                                .padding(.top, 4)                                .transition(.opacity.combined(with: .scale(scale: 0.95)))                                .animation(.easeInOut(duration: 0.2), value: generationWarning)                            }                                                        // ✨ Visual allowance meter (subscribers only)                            if isSubscribed {                                VStack(alignment: .leading, spacing: 4) {                                    Text("Monthly Image Allowance")                                        .font(.caption)                                        .foregroundColor(.gray)                                    GeometryReader { geometry in                                        ZStack(alignment: .leading) {                                            Rectangle()                                                .fill(Color.gray.opacity(0.2))                                                .frame(height: 6)                                                .cornerRadius(3)                                            // Used portion                                            Rectangle()                                                .fill(Color.red.opacity(0.3))                                                .frame(                                                    width: geometry.size.width * (Double(pageCountSetting) / 50.0),                                                    height: 6                                                )                                                .cornerRadius(3)                                            // Remaining portion                                            Rectangle()                                                .fill(subscriptionManager.remainingAllowance <= 10 ? Color.red : terracotta)                                                .frame(                                                    width: geometry.size.width * (Double(subscriptionManager.remainingAllowance) / 50.0),                                                    height: 6                                                )                                                .cornerRadius(3)                                        }                                    }                                    .frame(height: 6)                                    HStack {                                        Text("\(subscriptionManager.remainingAllowance) remaining")                                            .font(.caption2)                                            .foregroundColor(subscriptionManager.remainingAllowance <= 10 ? .red : .gray)                                        Spacer()                                        if pageCountSetting > subscriptionManager.remainingAllowance {                                            Text("Not enough!")                                                .font(.caption2)                                                .foregroundColor(.red)                                        } else {                                            Text("Will use \(pageCountSetting)")                                                .font(.caption2)                                                .foregroundColor(isLargeGeneration ? .orange : .gray)                                        }                                    }                                }                                .padding(.top, 8)                            }                        }                        .padding()                        .background(Color.black.opacity(0.03))                        .cornerRadius(12)                        .overlay(                            Group {                                if isSubscribed {                                    RoundedRectangle(cornerRadius: 12)                                        .stroke(                                            pageCountSetting > subscriptionManager.remainingAllowance ?                                            Color.red.opacity(0.5) : (isLargeGeneration ? Color.orange.opacity(0.3) : Color.clear),                                            lineWidth: 2                                        )                                }                            }                        )                        VStack(alignment: .leading, spacing: 10) {                            Text("Choose Art Style")                                .font(customSerifFont(size: 20))                                .foregroundColor(darkText)                            LazyVGrid(columns: artStyleColumns, spacing: 16) {                                ForEach(ArtStyle.allCases) { style in                                    ArtStyleButton(                                        style: style,                                        isSelected: currentSelectedArtStyle == style,                                        selectedBorderColor: terracotta,                                        selectedBackgroundColor: terracotta.opacity(0.15),                                        defaultBackgroundColor: Color.white.opacity(0.4),                                        defaultBorderColor: subtleGray.opacity(0.5),                                        selectedTextColor: terracotta,                                        defaultTextColor: darkText.opacity(0.9),                                        selectedSymbolColor: terracotta,                                        defaultSymbolColor: darkText.opacity(0.7)                                    ) {                                        self.selectedArtStyleRawValue = style.rawValue                                    }                                }                            }                            // Custom art style text field when selected                            if currentSelectedArtStyle == .custom {                                VStack(alignment: .leading, spacing: 5) {                                    Text("Describe your custom style:")                                        .font(.system(size: 14, weight: .medium, design: .rounded))                                        .foregroundColor(darkText.opacity(0.8))                                        .padding(.top, 10)                                                                        TextField("e.g., 'impressionistic oil painting', 'vintage sci-fi poster'", text: $customArtStyleText, axis: .vertical)                                        .font(.system(size: 15))                                        .padding(10)                                        .background(textFieldBackgroundColor)                                        .cornerRadius(8)                                        .overlay(                                            RoundedRectangle(cornerRadius: 8)                                                .stroke(subtleGray.opacity(0.7), lineWidth: 1)                                        )                                        .lineLimit(1...3)                                        .tint(terracotta)                                }                                .padding(.top, 5)                                .transition(.opacity.combined(with: .slide))                            }                        }                        .padding()                        .background(Color.black.opacity(0.03))                        .cornerRadius(12)                        .animation(.easeInOut, value: currentSelectedArtStyle)                                                Spacer() // Pushes content to the top                        // ─── Developer Unlock (hidden) ───────────────                        VStack(spacing: 8) {                            Text("Developer Key")                                .font(.caption)                                .foregroundColor(.gray)                            SecureField("Enter key", text: $devKey)                                .textFieldStyle(RoundedBorderTextFieldStyle())                            Button("Unlock") {                                if devKey == "Apologist123!" {                                    RCSubscriptionManager.shared.unlockDeveloperMode()                                    showDevSuccess = true                                    devKey = ""                                }                            }                            .disabled(devKey.isEmpty)                            .alert("Developer mode unlocked – unlimited images!", isPresented: $showDevSuccess) {                                Button("OK", role: .cancel) {}                            }                        }                        .padding(.top, 40)                        .opacity(devSectionRevealed ? 1 : 0.5) // subtle until revealed                        .onLongPressGesture(minimumDuration: 1) { // reveal after long press                            withAnimation { devSectionRevealed = true }                        }                    }                }            }        }        .navigationBarBackButtonHidden(true)        .onAppear {            sliderPageCount = Double(pageCountSetting)            clampPageCountIfNeeded()        }        // React if subscription state changes while view is up        .onChange(of: subscriptionManager.hasActiveSubscription) { _ in            clampPageCountIfNeeded()        }    }}// ArtStyleButton struct remains the samestruct ArtStyleButton: View {    let style: ArtStyle    let isSelected: Bool        let selectedBorderColor: Color    let selectedBackgroundColor: Color    let defaultBackgroundColor: Color    let defaultBorderColor: Color    let selectedTextColor: Color    let defaultTextColor: Color    let selectedSymbolColor: Color    let defaultSymbolColor: Color        let action: () -> Void    var body: some View {        Button(action: action) {            ZStack {                RoundedRectangle(cornerRadius: 12)                    .fill(isSelected ? selectedBackgroundColor : defaultBackgroundColor)                    .overlay(                        RoundedRectangle(cornerRadius: 12)                            .stroke(isSelected ? selectedBorderColor : defaultBorderColor, lineWidth: isSelected ? 2.5 : 1.5)                    )                    .aspectRatio(1.0, contentMode: .fit)                VStack {                    Spacer()                    Image(systemName: style.placeholderSymbolName)                        .font(.system(size: 30, weight: .light))                        .foregroundColor(isSelected ? selectedSymbolColor : defaultSymbolColor)                        .padding(.bottom, 5)                                        Text(style.rawValue)                        .font(.system(size: 14, weight: .medium, design: .rounded))                        .foregroundColor(isSelected ? selectedTextColor : defaultTextColor)                        .fixedSize(horizontal: false, vertical: true)                        .multilineTextAlignment(.center)                    Spacer()                }                .padding(8)            }        }        .buttonStyle(PlainButtonStyle())        .scaleEffect(isSelected ? 1.05 : 1.0)        .animation(.spring(response: 0.3, dampingFraction: 0.6), value: isSelected)    }}struct SettingsView_Previews: PreviewProvider {    static var previews: some View {        // It's good practice to wrap views that might be part of a navigation flow        // in a NavigationStack or NavigationView for previews.        NavigationStack {            SettingsView()        }    }}