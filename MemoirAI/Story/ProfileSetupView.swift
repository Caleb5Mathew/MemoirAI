////  ProfileSetupView.swift//  MemoirAI////  Edited by ChatGPT on 2025-06-08.//  • Strips everything down to a **head-shot-only** flow.//  • Lets the user pick OR take a photo, then crops it via the native editor.//  • Explains why the head-shot matters.//  • Adds a MemoirAI-orange “Generate Story Pages” button (disabled until a head-shot exists).//  • “X” in the top-left simply dismisses without generating.//import SwiftUIimport UIKitfileprivate struct LocalColors {    static let softCream   = Color(red: 0.98, green: 0.96, blue: 0.89)    static let terracotta  = Color(red: 0.82, green: 0.45, blue: 0.32)    static let defaultGray = Color.gray    static let subtleBG    = Color.black.opacity(0.05)}fileprivate extension Font {    static func appSerif(_ size: CGFloat) -> Font {        .system(size: size, design: .serif)    }}struct ProfileSetupView: View {    // External bindings    @Binding var headshotImage: UIImage?    @Binding var name: String               // kept so callers don’t break; unused in the UI    let onGenerate: () -> Void              // parent supplies generation action    // Dismiss    @Environment(\.dismiss) private var dismiss    // Image-picker workflow    @State private var showSourceChooser = false    @State private var showImagePicker  = false    @State private var pickerSource: UIImagePickerController.SourceType = .photoLibrary    var body: some View {        ZStack {            // Soft-cream background            LocalColors.softCream.ignoresSafeArea()            VStack {                // Header ― “X” dismiss                HStack {                    Button {                        dismiss()                    } label: {                        Image(systemName: "xmark")                            .font(.title2)                            .foregroundColor(.black)                            .padding(8)                            .background(LocalColors.subtleBG)                            .clipShape(Circle())                    }                    Spacer()                    // Spacer title to keep centre alignment if you want                }                .padding()                Spacer(minLength: 12)                Group {                    if let shot = headshotImage {                        Image(uiImage: shot)                            .resizable()                            .scaledToFit()                            .frame(maxWidth: 260, maxHeight: 260)                            .clipShape(RoundedRectangle(cornerRadius: 20))                            .shadow(radius: 4)                            .padding(.bottom, 8)                        Button("Change Photo") { showSourceChooser = true }                            .font(.callout.weight(.semibold))                    } else {                        Button {                            showSourceChooser = true                        } label: {                            VStack(spacing: 12) {                                Image(systemName: "person.crop.square")                                    .font(.system(size: 80))                                    .foregroundColor(LocalColors.defaultGray.opacity(0.6))                                Text("Add Head-shot")                                    .font(.headline.weight(.semibold))                                    .foregroundColor(.black)                            }                            .frame(maxWidth: .infinity, minHeight: 240)                            .background(LocalColors.subtleBG)                            .clipShape(RoundedRectangle(cornerRadius: 20))                        }                    }                }                .padding(.horizontal, 40)                Text("""                     A clear head-shot lets MemoirAI lock your skin-tone, \                     hair texture, and overall appearance so every photoreal \                     illustration actually **looks like you**. Without it, \                     the AI will guess—and often drifts to the wrong race or gender.                     """)                    .font(.callout)                    .multilineTextAlignment(.center)                    .padding(.horizontal, 32)                    .padding(.top, 18)                Spacer()                Button {                    onGenerate()                    dismiss()                } label: {                    Text("Generate Story Pages")                        .font(.headline.weight(.semibold))                        .foregroundColor(.white)                        .frame(maxWidth: .infinity)                        .padding(.vertical, 16)                        .background(LocalColors.terracotta)                        .clipShape(RoundedRectangle(cornerRadius: 16))                }                .disabled(headshotImage == nil)                .padding(.horizontal, 40)                .padding(.bottom, 30)            }        }        .confirmationDialog("Add Photo", isPresented: $showSourceChooser) {            if UIImagePickerController.isSourceTypeAvailable(.camera) {                Button("Take Photo") {                    pickerSource = .camera                    showImagePicker = true                }            }            Button("Choose from Library") {                pickerSource = .photoLibrary                showImagePicker = true            }            Button("Cancel", role: .cancel) { }        }        .sheet(isPresented: $showImagePicker) {            ImagePicker(source: pickerSource, allowsCropping: true) { img in                headshotImage = img            }        }    }}private struct ImagePicker: UIViewControllerRepresentable {    var source: UIImagePickerController.SourceType    var allowsCropping: Bool    var onPicked: (UIImage) -> Void    func makeCoordinator() -> Coordinator { Coordinator(onPicked: onPicked) }    func makeUIViewController(context: Context) -> UIImagePickerController {        let picker = UIImagePickerController()        picker.sourceType = source        picker.allowsEditing = allowsCropping        picker.delegate = context.coordinator        return picker    }    func updateUIViewController(_ uiViewController: UIImagePickerController, context: Context) {}    final class Coordinator: NSObject, UINavigationControllerDelegate, UIImagePickerControllerDelegate {        var onPicked: (UIImage) -> Void        init(onPicked: @escaping (UIImage) -> Void) { self.onPicked = onPicked }        func imagePickerController(_ picker: UIImagePickerController,                                   didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {            let key: UIImagePickerController.InfoKey = picker.allowsEditing ? .editedImage : .originalImage            if let img = info[key] as? UIImage {                onPicked(img)            }            picker.dismiss(animated: true)        }        func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {            picker.dismiss(animated: true)        }    }}struct ProfileSetupView_Previews: PreviewProvider {    @State static var img: UIImage? = nil    @State static var name = "N/A"    static var previews: some View {        ProfileSetupView(headshotImage: $img,                         name: $name,                         onGenerate: { print("Generate tapped") })    }}