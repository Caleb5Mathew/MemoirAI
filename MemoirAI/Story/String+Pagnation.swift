//import Foundation//import UIKit////extension String {//    /// Splits the string into pages of roughly `wordsPerPage` words each.//    func paginated(wordsPerPage: Int = 130) -> [String] {//        let words = self.split { $0.isWhitespace }//        guard words.count > wordsPerPage else {//            return [self]//        }//        var pages: [String] = []//        var start = 0//        while start < words.count {//            let end = min(start + wordsPerPage, words.count)//            let slice = words[start..<end]//            pages.append(slice.joined(separator: " "))//            start += wordsPerPage//        }//        return pages//    }////    func paginate(for size: CGSize, with font: UIFont) -> [String] {//        let attributedString = NSAttributedString(string: self, attributes: [.font: font])//        let framesetter = CTFramesetterCreateWithAttributedString(attributedString)//        var pages = [String]()//        var start = 0////        while start < self.count {//            let path = CGMutablePath()//            path.addRect(CGRect(origin: .zero, size: size))//            let frame = CTFramesetterCreateFrame(framesetter, CFRangeMake(start, 0), path, nil)//            let visibleRange = CTFrameGetVisibleStringRange(frame)////            if visibleRange.length == 0 {//                break//            }////            let end = start + visibleRange.length//            let startIndex = self.index(self.startIndex, offsetBy: start)//            let endIndex = self.index(self.startIndex, offsetBy: end)//            pages.append(String(self[startIndex..<endIndex]))////            start = end//        }////        return pages//    }//}