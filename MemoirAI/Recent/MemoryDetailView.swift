import SwiftUIimport UIKitimport AVFoundationimport PhotosUIimport CoreDatastruct MemoryDetailView: View {    @Environment(\.presentationMode) private var presentationMode    @Environment(\.managedObjectContext) private var context    let memory: MemoryEntry    @State private var audioPlayer: AVAudioPlayer?    @State private var isPlaying = false    // Photo states    @State private var photoItems: [PhotosPickerItem] = []    @State private var photoDatas: [Data] = []    @State private var images: [UIImage] = []    @State private var isLoadingImage = false    @State private var photoError: String?    @State private var isEditing = false    @State private var draftText: String = ""    private let backgroundColor = Color(red: 1.0, green: 0.96, blue: 0.89)    private let cardColor       = Color(red: 0.98, green: 0.93, blue: 0.80)    private let headerColor     = Color(red: 0.07, green: 0.21, blue: 0.13)    private let softCream       = Color(red: 253/255, green: 234/255, blue: 198/255)        // Grid configuration    private let columns = Array(repeating: GridItem(.flexible(), spacing: 8), count: 4)    var body: some View {        ScrollView {            VStack(spacing: 24) {                // Centered prompt header                Text(memory.prompt ?? "")                    .font(.custom("Georgia-Bold", size: 22))                    .foregroundColor(headerColor)                    .multilineTextAlignment(.center)                    .padding(.horizontal, 24)                VStack(spacing: 20) {                    // Date                    if let date = memory.createdAt {                        Text(dateFormatted(date))                            .font(.custom("Georgia-Bold", size: 22))                            .foregroundColor(.black)                    }                    // Audio playback                    if let audioURL = memory.audioFileURL,                       let url = URL(string: audioURL) {                        Button(action: { togglePlayback(url: url) }) {                            Image(systemName: isPlaying ? "pause.circle.fill" : "play.circle.fill")                                .resizable()                                .frame(width: 64, height: 64)                                .foregroundColor(.orange)                        }                        Text("Tap to listen to this memory")                            .font(.custom("Georgia", size: 16))                            .foregroundColor(.black)                        Divider()                        // Display stored transcript                        if let saved = memory.text, !saved.isEmpty {                            Text(saved)                                .font(.custom("Georgia", size: 18))                                .multilineTextAlignment(.leading)                                .foregroundColor(.black)                                .lineSpacing(4)                                .padding(.vertical, 8)                        }                        Divider()                    }                    // Editor mode                    if isEditing {                        TextEditor(text: $draftText)                            .font(.custom("Georgia", size: 18))                            .frame(minHeight: 120)                            .overlay(                                RoundedRectangle(cornerRadius: 12)                                    .stroke(Color.gray.opacity(0.3), lineWidth: 1)                            )                            .onAppear { draftText = memory.text ?? "" }                        Divider()                    }                    // Photo gallery header                    Text("Photos")                        .font(.subheadline)                        .textCase(.uppercase)                        .foregroundColor(.gray)                        .frame(maxWidth: .infinity, alignment: .leading)                    // Photo grid with up to 8 slots                    let gridWidth = UIScreen.main.bounds.width * 0.9                    let thumbSize = (gridWidth - (3 * 8)) / 4                    let remaining = 8 - photoDatas.count                    LazyVGrid(columns: columns, spacing: 8) {                        ForEach(0..<8, id: \.self) { idx in                            if idx < images.count {                                Image(uiImage: images[idx])                                    .resizable()                                    .aspectRatio(contentMode: .fill)                                    .frame(width: thumbSize, height: thumbSize)                                    .clipped()                                    .cornerRadius(8)                            } else {                                PhotosPicker(                                    selection: $photoItems,                                    maxSelectionCount: remaining,                                    matching: .images,                                    photoLibrary: .shared()                                ) {                                    ZStack {                                        RoundedRectangle(cornerRadius: 8)                                            .fill(softCream)                                            .frame(width: thumbSize, height: thumbSize)                                            .overlay(                                                RoundedRectangle(cornerRadius: 8)                                                    .stroke(Color.black,                                                            style: StrokeStyle(lineWidth: 2, dash: [5]))                                            )                                        Image(systemName: "plus")                                            .font(.title)                                            .foregroundColor(.gray)                                    }                                }                                .onChange(of: photoItems) { items in                                    Task {                                        for item in items {                                            if let data = try? await item.loadTransferable(type: Data.self) {                                                photoDatas.append(data)                                                if let ui = UIImage(data: data) {                                                    images.append(ui)                                                }                                                                                                // Create a new Photo entity and add it to the memory                                                let photo = Photo(context: context)                                                photo.id = UUID()                                                photo.data = data                                                photo.memoryEntry = memory                                            }                                        }                                        try? context.save()                                        photoItems.removeAll()                                    }                                }                            }                        }                    }                }                .padding()                .background(cardColor)                .cornerRadius(32)                .shadow(color: Color.black.opacity(0.06), radius: 4, x: 0, y: 4)                .padding(.horizontal, 24)                Spacer(minLength: 24)            }            .onAppear {                // Load existing photos from the relationship                loadPhotosFromRelationship()            }        }        .background(backgroundColor.ignoresSafeArea())        .navigationBarBackButtonHidden(true)        .toolbar {            ToolbarItem(placement: .navigationBarLeading) {                Button { presentationMode.wrappedValue.dismiss() } label: {                    Image(systemName: "chevron.left")                        .font(.system(size: 18, weight: .medium))                        .foregroundColor(.black)                }            }            ToolbarItemGroup(placement: .navigationBarTrailing) {                Button(action: shareMemory) { Image(systemName: "square.and.arrow.up") }                Button { isEditing.toggle() } label: {                    Image(systemName: isEditing ? "checkmark" : "pencil")                }            }        }    }        private func loadPhotosFromRelationship() {        // Clear existing data        photoDatas.removeAll()        images.removeAll()                // Get photos from relationship        guard let photoSet = memory.photos as? Set<Photo> else { return }                // Convert Set<Photo> to sorted array for consistent display        let photoArray = photoSet.sorted { ($0.id?.uuidString ?? "") < ($1.id?.uuidString ?? "") }                // Extract data and create UIImages        for photo in photoArray {            if let data = photo.data {                photoDatas.append(data)                if let uiImage = UIImage(data: data) {                    images.append(uiImage)                }            }        }    }    private func togglePlayback(url: URL) {        do {            if isPlaying { audioPlayer?.stop() }            else {                audioPlayer = try AVAudioPlayer(contentsOf: url)                audioPlayer?.play()            }            isPlaying.toggle()        } catch {            print("Playback error: \(error)")        }    }    private func shareMemory() {        var items: [Any] = []        if let text = memory.text { items.append(text) }        if let urlString = memory.audioFileURL,           let url = URL(string: urlString) {            items.append(url)        }        items.append(contentsOf: images)        let av = UIActivityViewController(activityItems: items, applicationActivities: nil)        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,           let root = scene.windows.first?.rootViewController {            root.present(av, animated: true)        }    }    private func dateFormatted(_ date: Date) -> String {        let fmt = DateFormatter()        fmt.dateStyle = .long        return fmt.string(from: date)    }}struct MemoryDetailView_Previews: PreviewProvider {    static var previews: some View {        let ctx = PersistenceController.preview.container.viewContext        let sample = MemoryEntry(context: ctx)        sample.prompt = "What did a normal day look like when you were seven?"        sample.text = "I used to wake up early and..."        sample.createdAt = Date()        sample.audioFileURL = nil        // No need to set photoDatas anymore        return NavigationView { MemoryDetailView(memory: sample) }    }}