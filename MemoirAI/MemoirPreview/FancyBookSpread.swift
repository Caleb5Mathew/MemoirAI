////  FancyBookSpread.swift//  MemoirAI////  Created by user941803 on 7/5/25.//import SwiftUIimport CoreImage.CIFilterBuiltins// Displays a single two-page spread that resembles a printed book.// Left page: optional QR + photo + prompt.  Right page: story text.struct FancyBookSpread: View {    let memory: MemoryEntry    let page: Int    let total: Int    private var photoImage: UIImage? {        guard let photos = memory.photos as? Set<Photo>,              let data = photos.first?.data,              let img = UIImage(data: data) else { return nil }        return img    }    private var qrCodeImage: UIImage? {        guard let id = memory.id else { return nil }        let url = "memoirai://memory/\(id.uuidString)"        return UIImage.qrCode(from: url, size: 120)    }    var body: some View {        GeometryReader { geo in            let pageW = geo.size.width / 2 - 20 // inner margin            let pageH = geo.size.height - 40            ZStack {                // Book background (table texture)                Color(red: 0.87, green: 0.93, blue: 0.96) // soft blue backdrop                RoundedRectangle(cornerRadius: 12)                    .fill(Color.white)                    .frame(width: geo.size.width - 32, height: geo.size.height - 24)                    .shadow(color: .black.opacity(0.15), radius: 12, x: 0, y: 8)                // Spine                Rectangle()                    .fill(Color.black.opacity(0.1))                    .frame(width: 4, height: geo.size.height - 60)                // Pages content                HStack(spacing: 0) {                    // Left page                    VStack(spacing: 12) {                        if let qr = qrCodeImage {                            Image(uiImage: qr)                                .resizable()                                .frame(width: 64, height: 64)                                .padding(.top, 12)                        }                        if let img = photoImage {                            Image(uiImage: img)                                .resizable()                                .aspectRatio(contentMode: .fill)                                .frame(width: pageW * 0.8, height: pageW * 0.8)                                .clipped()                                .cornerRadius(6)                        } else {                            Image(systemName: "photo")                                .font(.system(size: 60))                                .foregroundColor(.gray.opacity(0.4))                                .frame(width: pageW * 0.8, height: pageW * 0.8)                                .background(Color.gray.opacity(0.1))                                .cornerRadius(6)                        }                        Text(memory.prompt ?? "Untitled Memory")                            .font(.customSerifFallback(size: 16).weight(.semibold))                            .multilineTextAlignment(.center)                            .padding(.horizontal, 12)                        Spacer()                    }                    .frame(width: pageW, height: pageH)                    .background(Color.white)                    .overlay(Rectangle().stroke(Color.black.opacity(0.05), lineWidth: 0.5))                    // Right page                    ScrollView {                        Text(memory.text ?? "")                            .font(.customSerifFallback(size: 15))                            .lineSpacing(4)                            .padding(.horizontal, 24)                            .padding(.vertical, 32)                    }                    .frame(width: pageW, height: pageH)                    .background(Color.white)                    .overlay(Rectangle().stroke(Color.black.opacity(0.05), lineWidth: 0.5))                }                .clipShape(Rectangle())                // Footer page numbers                Text("\(page) / \(total)")                    .font(.caption2)                    .foregroundColor(.secondary)                    .position(x: geo.size.width - 60, y: geo.size.height - 24)            }        }    }} 