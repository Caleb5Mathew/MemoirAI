import SwiftUIimport CoreData// Live preview of the memoir as the user adds memories. Displays each memory as a two-page spread in a page-flipping TabView.struct LiveMemoirPreviewView: View {    @EnvironmentObject var profileVM: ProfileViewModel    @Environment(\.managedObjectContext) private var context    @State private var entries: [MemoryEntry] = []    var body: some View {        ZStack {            Color(red: 0.95, green: 0.96, blue: 0.97).ignoresSafeArea()            if entries.isEmpty {                VStack(spacing: 12) {                    Image(systemName: "book")                        .font(.system(size: 56))                        .foregroundColor(.gray.opacity(0.4))                    Text("No memories yet")                        .font(.title3.weight(.semibold))                    Text("Record a memory to start building your book.")                        .font(.subheadline)                        .foregroundColor(.secondary)                        .multilineTextAlignment(.center)                }                .padding()            } else {                TabView {                    ForEach(entries.indices, id: \.self) { idx in                        FancyBookSpread(memory: entries[idx], page: idx + 1, total: entries.count)                            .frame(maxWidth: .infinity, maxHeight: .infinity)                            .padding(.horizontal, 12)                    }                }                .tabViewStyle(.page(indexDisplayMode: .automatic))            }        }        .navigationTitle("Memoir Preview")        .onAppear { fetchEntries() }    }    private func fetchEntries() {        let req: NSFetchRequest<MemoryEntry> = MemoryEntry.fetchRequest()        req.predicate = NSPredicate(format: "profileID == %@", profileVM.selectedProfile.id as CVarArg)        req.sortDescriptors = [NSSortDescriptor(key: "createdAt", ascending: true)]        do {            entries = try context.fetch(req)        } catch {            print("LiveMemoirPreviewView fetch error:", error.localizedDescription)            entries = []        }    }}// Single two-page spread for a memory entry.private struct MemoryBookSpread: View {    let memory: MemoryEntry    let page: Int    let total: Int    private var photoImage: UIImage? {        guard let photos = memory.photos as? Set<Photo>,              let data = photos.first?.data,              let img = UIImage(data: data) else { return nil }        return img    }    var body: some View {        GeometryReader { geo in            HStack(spacing: 0) {                // Left page — photo + prompt                VStack(spacing: 12) {                    if let img = photoImage {                        Image(uiImage: img)                            .resizable()                            .aspectRatio(contentMode: .fill)                            .frame(height: geo.size.height * 0.6)                            .clipped()                    } else {                        Rectangle()                            .fill(Color.gray.opacity(0.15))                            .frame(height: geo.size.height * 0.6)                            .overlay(Image(systemName: "photo").font(.largeTitle).foregroundColor(.gray))                    }                    Text(memory.prompt ?? "Untitled Memory")                        .font(.headline)                        .multilineTextAlignment(.center)                        .padding(.horizontal)                    Spacer()                }                .frame(width: geo.size.width / 2)                .background(Color.white)                // Right page — full text                ScrollView {                    Text(memory.text ?? "")                        .font(.body)                        .padding()                }                .frame(width: geo.size.width / 2)                .background(Color.white)            }            .cornerRadius(8)            .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)            .overlay(                // Page number footer                Text("\(page) / \(total)")                    .font(.caption)                    .foregroundColor(.secondary)                    .padding(6),                alignment: .bottom            )        }    }}