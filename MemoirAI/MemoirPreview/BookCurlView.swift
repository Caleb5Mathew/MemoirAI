////////  BookCurlView.swift////  MemoirAI////////  Created by Caleb on 2025-08-01.////////import SwiftUI////struct BookCurlView: UIViewControllerRepresentable {//    @Binding var pages: [EditorPage]//    @Binding var currentIndex: Int//    @Binding var isEditing: Bool////    func makeUIViewController(context: Context) -> UIPageViewController {//        let pageViewController = UIPageViewController(//            transitionStyle: .pageCurl,//            navigationOrientation: .horizontal,//            options: [UIPageViewController.OptionsKey.spineLocation: UIPageViewController.SpineLocation.mid.rawValue]//        )//        pageViewController.isDoubleSided = true//        pageViewController.dataSource = context.coordinator//        pageViewController.delegate = context.coordinator//        return pageViewController//    }////    func updateUIViewController(_ pageViewController: UIPageViewController, context: Context) {//        let viewControllers = context.coordinator.getViewControllers(for: currentIndex)//        pageViewController.setViewControllers(//            viewControllers,//            direction: .forward,//            animated: false//        )//    }////    func makeCoordinator() -> Coordinator {//        Coordinator(self)//    }////    class Coordinator: NSObject, UIPageViewControllerDataSource, UIPageViewControllerDelegate {//        var parent: BookCurlView////        init(_ parent: BookCurlView) {//            self.parent = parent//        }////        func getViewControllers(for index: Int) -> [UIViewController] {//            guard parent.pages.indices.contains(index) else { return [] }////            if index == 0 {//                return [createHostingController(for: 0)]//            }////            let leftPageIndex = (index % 2 != 0) ? index : index - 1//            let rightPageIndex = leftPageIndex + 1////            let leftVC = createHostingController(for: leftPageIndex)////            if parent.pages.indices.contains(rightPageIndex) {//                let rightVC = createHostingController(for: rightPageIndex)//                return [leftVC, rightVC]//            } else {//                return [leftVC]//            }//        }////        func createHostingController(for pageNumber: Int) -> UIViewController {//            let view = BookPageClassic(//                page: parent.pages[pageNumber],//                isEditing: parent.$isEditing,//                pageNumber: pageNumber//            )//            let hostingController = UIHostingController(rootView: view)//            hostingController.view.tag = pageNumber // Tag the view with the page number//            return hostingController//        }////        func createBlankViewController() -> UIViewController {//            let blankView = Color.clear//            return UIHostingController(rootView: blankView)//        }//        //        func pageViewController(//            _ pageViewController: UIPageViewController,//            viewControllerBefore viewController: UIViewController//        ) -> UIViewController? {//            guard let currentIndex = viewController.view.tag as? Int, currentIndex > 0 else {//                return nil//            }//            return createHostingController(for: currentIndex - 1)//        }////        func pageViewController(//            _ pageViewController: UIPageViewController,//            viewControllerAfter viewController: UIViewController//        ) -> UIViewController? {//            guard let currentIndex = viewController.view.tag as? Int, currentIndex + 1 < parent.pages.count else {//                return nil//            }//            return createHostingController(for: currentIndex + 1)//        }////        func pageViewController(//             _ pageViewController: UIPageViewController,//             didFinishAnimating finished: Bool,//             previousViewControllers: [UIViewController],//             transitionCompleted completed: Bool//         ) {//             if completed,//                let visibleViewController = pageViewController.viewControllers?.first,//                let newIndex = visibleViewController.view.tag as? Int {//                 parent.currentIndex = newIndex//             }//         }//    }//} 