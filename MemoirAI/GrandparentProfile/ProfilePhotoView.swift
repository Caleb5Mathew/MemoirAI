// ProfilePhotoView.swift// MemoirAIimport SwiftUIstruct ProfilePhotoView: View {    @ObservedObject var viewModel: ProfileViewModel    @Binding var disableWiggle: Bool    var onAddPhotoTapped: () -> Void    @State private var isShowingRenameAlert = false    @State private var newName: String = ""    @State private var animateOffset = false    @State private var wiggleTimer = Timer.publish(every: 0.6, on: .main, in: .common).autoconnect()    // Baseline shift and wiggle amplitude    private let fullAmplitude: CGFloat = 40    private var amplitude: CGFloat { fullAmplitude / 3 }    var body: some View {        ZStack(alignment: .bottomTrailing) {            if viewModel.profiles.isEmpty {                dashedAddProfileBox            } else {                profileImageBox            }            Image(systemName: "camera.circle.fill")                .resizable()                .frame(width: 42, height: 42)                .foregroundColor(.orange)                .shadow(radius: 4)                .overlay(Circle().stroke(Color.white, lineWidth: 2))                .offset(                    x: disableWiggle                        ? -fullAmplitude                            // static at -30 when disabled                        : (-fullAmplitude + (animateOffset ? amplitude : -amplitude)),                    y: 0                )                .onTapGesture {                    onAddPhotoTapped()                    disableWiggle = true                    animateOffset = false                }                .onReceive(wiggleTimer) { _ in                    guard !disableWiggle else { return }                    animateOffset.toggle()                }                .animation(.easeInOut(duration: 0.3), value: animateOffset)        }        .padding(12)        .frame(height: 180)        .alert("Rename Profile", isPresented: $isShowingRenameAlert) {            TextField("New name", text: $newName)            Button("Save") {                viewModel.updateName(for: viewModel.selectedProfile, to: newName)            }            Button("Cancel", role: .cancel) {}        } message: {            Text("Enter a new name for this profile.")        }    }    private var profileImageBox: some View {        HStack {            Button {                viewModel.selectPreviousProfile()            } label: {                Image(systemName: "chevron.left")                    .foregroundColor(.gray)                    .padding()            }            Spacer()            ZStack(alignment: .topTrailing) {                viewModel.selectedProfile.image                    .resizable()                    .scaledToFill()                    .frame(width: 180, height: 180)                    .clipShape(RoundedRectangle(cornerRadius: 24))                    .overlay(                        RoundedRectangle(cornerRadius: 24)                            .stroke(Color.black.opacity(0.05), lineWidth: 1)                    )                    .clipped()                Menu {                    Button("Rename") {                        newName = viewModel.selectedProfile.name ?? ""                        isShowingRenameAlert = true                    }                    Button("Remove Photo", role: .destructive) {                        viewModel.removePhotoFromSelectedProfile()                    }                    Button("Delete Profile", role: .destructive) {                        viewModel.deleteSelectedProfile()                    }                } label: {                    Image(systemName: "ellipsis.circle.fill")                        .font(.title2)                        .foregroundColor(.gray)                        .padding(6)                }            }            .frame(width: 180, height: 180)            .shadow(color: Color.black.opacity(0.03), radius: 4, x: 0, y: 2)            Spacer()            Button {                viewModel.selectNextProfile()            } label: {                Image(systemName: "chevron.right")                    .foregroundColor(.gray)                    .padding()            }        }    }    private var dashedAddProfileBox: some View {        Button {            onAddPhotoTapped()        } label: {            VStack {                Image(systemName: "photo.fill.on.rectangle.fill")                    .font(.system(size: 32))                    .foregroundColor(.gray)                Text("Add another profile here!")                    .font(.footnote)                    .foregroundColor(.gray)            }            .frame(maxWidth: .infinity, minHeight: 180)            .overlay(                RoundedRectangle(cornerRadius: 24)                    .stroke(style: StrokeStyle(lineWidth: 2, dash: [8]))                    .foregroundColor(.gray.opacity(0.5))            )        }    }}struct ProfilePhotoView_Previews: PreviewProvider {    static var previews: some View {        ProfilePhotoView(            viewModel: ProfileViewModel(),            disableWiggle: .constant(false)        ) {            // tapped        }        .padding()        .previewLayout(.sizeThatFits)    }}