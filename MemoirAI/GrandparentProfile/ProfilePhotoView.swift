// ProfilePhotoView.swift// MemoirAIimport SwiftUIstruct ProfilePhotoView: View {    @ObservedObject var viewModel: ProfileViewModel    @Binding var disableWiggle: Bool    var onAddPhotoTapped: () -> Void    @State private var isShowingRenameAlert = false    @State private var newName: String = ""    @State private var animateOffset = false    @State private var wiggleTimer = Timer.publish(every: 0.6, on: .main, in: .common).autoconnect()    @StateObject private var subscriptionManager = RCSubscriptionManager.shared    // Baseline shift and wiggle amplitude    private let fullAmplitude: CGFloat = 40    private var amplitude: CGFloat { fullAmplitude / 3 }    // âœ¨ NEW: Show different UI based on subscription and profile count    private var shouldShowAddButton: Bool {        // Always show for existing profiles (for photo updates)        if !viewModel.profiles.isEmpty {            return true        }                // For new profiles, check subscription limits        return viewModel.canCreateNewProfile    }        private var buttonColor: Color {        if viewModel.canCreateNewProfile {            return .orange  // Normal state        } else {            return .gray    // Restricted state        }    }    var body: some View {        ZStack(alignment: .bottomTrailing) {            if viewModel.profiles.isEmpty {                dashedAddProfileBox            } else {                profileImageBox            }            // âœ¨ ENHANCED: Smart camera button with subscription awareness            if shouldShowAddButton {                Button(action: onAddPhotoTapped) {                    Image(systemName: viewModel.canCreateNewProfile ? "camera.circle.fill" : "lock.circle.fill")                        .resizable()                        .frame(width: 42, height: 42)                        .foregroundColor(buttonColor)                        .shadow(radius: 4)                        .overlay(Circle().stroke(Color.white, lineWidth: 2))                }                .offset(                    x: disableWiggle                        ? -fullAmplitude                        : (-fullAmplitude + (animateOffset ? amplitude : -amplitude)),                    y: 0                )                .onReceive(wiggleTimer) { _ in                    guard !disableWiggle && viewModel.canCreateNewProfile else { return }                    animateOffset.toggle()                }                .animation(.easeInOut(duration: 0.3), value: animateOffset)            }                        // âœ¨ NEW: Subscription status indicator for multiple profiles            if viewModel.profiles.count > 1 && subscriptionManager.hasActiveSubscription {                VStack {                    Text("ðŸ‘‘")                        .font(.caption)                    Text("\(viewModel.profiles.count) profiles")                        .font(.system(size: 10, weight: .medium))                        .foregroundColor(.gray)                }                .offset(x: 60, y: -60)            }        }        .padding(12)        .frame(height: 180)        .alert("Rename Profile", isPresented: $isShowingRenameAlert) {            TextField("New name", text: $newName)            Button("Save") {                viewModel.updateName(for: viewModel.selectedProfile, to: newName)            }            Button("Cancel", role: .cancel) {}        } message: {            Text("Enter a new name for this profile.")        }    }    private var profileImageBox: some View {        HStack {            // âœ¨ ENHANCED: Show previous button only if multiple profiles            if viewModel.profiles.count > 1 {                Button {                    viewModel.selectPreviousProfile()                } label: {                    Image(systemName: "chevron.left")                        .foregroundColor(.gray)                        .padding()                }            } else {                Spacer().frame(width: 44) // Maintain spacing            }            Spacer()            ZStack(alignment: .topTrailing) {                viewModel.selectedProfile.image                    .resizable()                    .scaledToFill()                    .frame(width: 180, height: 180)                    .clipShape(RoundedRectangle(cornerRadius: 24))                    .overlay(                        RoundedRectangle(cornerRadius: 24)                            .stroke(Color.black.opacity(0.05), lineWidth: 1)                    )                    .clipped()                Menu {                    Button("Rename") {                        newName = viewModel.selectedProfile.name                        isShowingRenameAlert = true                    }                    Button("Remove Photo", role: .destructive) {                        viewModel.removePhotoFromSelectedProfile()                    }                                        // âœ¨ NEW: Only show delete if multiple profiles exist                    if viewModel.profiles.count > 1 {                        Button("Delete Profile", role: .destructive) {                            viewModel.deleteSelectedProfile()                        }                    }                } label: {                    Image(systemName: "ellipsis.circle.fill")                        .font(.title2)                        .foregroundColor(.gray)                        .padding(6)                }            }            .frame(width: 180, height: 180)            .shadow(color: Color.black.opacity(0.03), radius: 4, x: 0, y: 2)            Spacer()            // âœ¨ ENHANCED: Show next button only if multiple profiles            if viewModel.profiles.count > 1 {                Button {                    viewModel.selectNextProfile()                } label: {                    Image(systemName: "chevron.right")                        .foregroundColor(.gray)                        .padding()                }            } else {                Spacer().frame(width: 44) // Maintain spacing            }        }    }    private var dashedAddProfileBox: some View {        Button {            onAddPhotoTapped()        } label: {            VStack {                Image(systemName: viewModel.canCreateNewProfile ? "photo.fill.on.rectangle.fill" : "lock.fill")                    .font(.system(size: 32))                    .foregroundColor(viewModel.canCreateNewProfile ? .gray : .orange)                                Text(viewModel.canCreateNewProfile ? "Add your first profile!" : "Subscribe for multiple profiles")                    .font(.footnote)                    .foregroundColor(viewModel.canCreateNewProfile ? .gray : .orange)                    .multilineTextAlignment(.center)            }            .frame(maxWidth: .infinity, minHeight: 180)            .overlay(                RoundedRectangle(cornerRadius: 24)                    .stroke(style: StrokeStyle(lineWidth: 2, dash: [8]))                    .foregroundColor(viewModel.canCreateNewProfile ? .gray.opacity(0.5) : .orange.opacity(0.7))            )        }    }}struct ProfilePhotoView_Previews: PreviewProvider {    static var previews: some View {        ProfilePhotoView(            viewModel: ProfileViewModel(),            disableWiggle: .constant(false)        ) {            // tapped        }        .padding()        .previewLayout(.sizeThatFits)    }}