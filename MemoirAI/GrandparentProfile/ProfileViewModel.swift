import Foundationimport SwiftUIclass ProfileViewModel: ObservableObject {    @Published var profiles: [Profile] = []    @Published var selectedProfileIndex: Int = 0 {        didSet {            saveSelectedProfileIndex()        }    }    private let profilesKey = "profiles.json"    private let selectedIndexKey = "selectedProfileIndex"    init() {        loadProfiles()    }    var selectedProfile: Profile {        if profiles.isEmpty {            let defaultProfile = Profile(name: "Grandparent", photoData: nil)            profiles.append(defaultProfile)            selectedProfileIndex = 0            saveProfiles()        }        if !profiles.indices.contains(selectedProfileIndex) {            selectedProfileIndex = 0        }        return profiles[selectedProfileIndex]    }    func addProfile(_ profile: Profile) {        profiles.append(profile)        selectedProfileIndex = profiles.count - 1        saveProfiles()    }    func deleteSelectedProfile() {        guard profiles.indices.contains(selectedProfileIndex) else { return }        profiles.remove(at: selectedProfileIndex)        selectedProfileIndex = max(0, selectedProfileIndex - 1)        saveProfiles()    }    func updateSelectedProfile(with newProfile: Profile) {        guard profiles.indices.contains(selectedProfileIndex) else { return }        profiles[selectedProfileIndex] = newProfile        saveProfiles()    }    func updateName(for profile: Profile, to newName: String) {        guard let index = profiles.firstIndex(of: profile) else { return }        profiles[index].name = newName        saveProfiles()    }    func removePhotoFromSelectedProfile() {        guard profiles.indices.contains(selectedProfileIndex) else { return }        profiles[selectedProfileIndex].photoData = nil        saveProfiles()    }    func selectPreviousProfile() {        guard !profiles.isEmpty else { return }        selectedProfileIndex = (selectedProfileIndex - 1 + profiles.count) % profiles.count    }    func selectNextProfile() {        guard !profiles.isEmpty else { return }        selectedProfileIndex = (selectedProfileIndex + 1) % profiles.count    }    private func getDocumentsDirectory() -> URL {        FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!    }    private func saveProfiles() {        let url = getDocumentsDirectory().appendingPathComponent(profilesKey)        if let data = try? JSONEncoder().encode(profiles) {            try? data.write(to: url)        }    }    private func loadProfiles() {        let url = getDocumentsDirectory().appendingPathComponent(profilesKey)        if let data = try? Data(contentsOf: url),           let decoded = try? JSONDecoder().decode([Profile].self, from: data) {            self.profiles = decoded        }        if profiles.isEmpty {            // Add a default profile using fallback image            let defaultProfile = Profile(name: "Grandparent", photoData: nil)            profiles.append(defaultProfile)            selectedProfileIndex = 0            saveProfiles()        }        let savedIndex = UserDefaults.standard.integer(forKey: selectedIndexKey)        selectedProfileIndex = min(savedIndex, max(0, profiles.count - 1))    }    private func saveSelectedProfileIndex() {        UserDefaults.standard.set(selectedProfileIndex, forKey: selectedIndexKey)    }}